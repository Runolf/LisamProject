{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\pages\\\\project-detail.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport ProjectService from '../services/project-service';\nimport \"./detail.css\";\nimport { statut } from '../models/statut';\nimport formatDate from '../helpers/format-date';\n\nconst ProjectDetail = ({\n  match\n}) => {\n  const [project, SetProject] = useState(null);\n  const history = useHistory();\n\n  const goToClient = id => {\n    history.push(`/Client/${id}`);\n  };\n\n  useEffect(() => {\n    ProjectService.getProject(+match.params.id).then(project => SetProject(project));\n  }, [match.params.id]);\n  /* why those test below? \r\n      Obligation de passer par ces test sinon il y a un message d'erreur qui\r\n      plante l'application disant que project est possiblement null. \r\n        date:\r\n          obligation de passer par cette convertion pour pouvoir utiliser les\r\n          m√©thodes .getDate, .getMonth etc... Sinon l'application ne reconnait \r\n          pas project.SignatureDate comme une date ... \r\n        st:\r\n          Obligation de passe par un test s'il est undefined, sinon il y a \r\n          un message d'erreur faisant planter l'application\r\n          \r\n  */\n\n  var date = new Date();\n  var st = null;\n\n  if (project === null || project === undefined) {\n    date = new Date();\n    st = null;\n  } else {\n    if (project.SignatureDate !== undefined && project.Statut !== undefined) {\n      date = new Date(project.SignatureDate);\n      st = statut[project.Statut];\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, project ? React.createElement(\"table\", {\n    className: \"container centered table-detail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    style: {\n      color: \"black\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Project: \", project.ProjectNumber, React.createElement(Link, {\n    to: `/project-edit/${project.ProjectId}`,\n    className: \"btn right grey waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"edit\"))))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"grey darken-2 m2 center border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Project leader: \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), project.ProjectLeader)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"grey darken-2 m2 center border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Signature date:\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), formatDate(date))), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"grey darken-2 m2 center border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Statut:\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), st)), project.Client ? React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"grey darken-2 m2 center border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Client:\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), project.Client.Company_Name)) : React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"grey darken-2 m2 center border\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Pas de client\")))) : React.createElement(\"div\", {\n    className: \"center object-notfound\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Pas de projet trouv\\xE9\"), React.createElement(Link, {\n    to: \"/\",\n    className: \"waves-effect waves-teal btn-flat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Home\")));\n};\n\nexport default ProjectDetail;","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/pages/project-detail.tsx"],"names":["React","useState","useEffect","Link","useHistory","ProjectService","statut","formatDate","ProjectDetail","match","project","SetProject","history","goToClient","id","push","getProject","params","then","date","Date","st","undefined","SignatureDate","Statut","color","ProjectNumber","ProjectId","ProjectLeader","Client","Company_Name"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link, useHistory} from 'react-router-dom';\r\nimport Project from '../models/project';\r\nimport ProjectService from '../services/project-service';\r\nimport \"./detail.css\";\r\nimport { statut } from '../models/statut';\r\nimport formatDate from '../helpers/format-date';\r\n\r\ntype Params = {id: string};\r\nconst ProjectDetail: FunctionComponent<RouteComponentProps<Params>> = ({match}) => {\r\n    \r\n    const [project, SetProject] = useState<Project|null>(null);\r\n    \r\n    const history = useHistory();\r\n\r\n    const goToClient = (id:number) => {\r\n        history.push(`/Client/${id}`);\r\n     }\r\n    \r\n    useEffect(() => {\r\n        ProjectService.getProject(+match.params.id)\r\n        .then(project => SetProject(project));\r\n        }, [match.params.id]);\r\n\r\n\r\n\r\n        /* why those test below? \r\n            Obligation de passer par ces test sinon il y a un message d'erreur qui\r\n            plante l'application disant que project est possiblement null. \r\n\r\n            date:\r\n                obligation de passer par cette convertion pour pouvoir utiliser les\r\n                m√©thodes .getDate, .getMonth etc... Sinon l'application ne reconnait \r\n                pas project.SignatureDate comme une date ... \r\n\r\n            st:\r\n                Obligation de passe par un test s'il est undefined, sinon il y a \r\n                un message d'erreur faisant planter l'application\r\n                \r\n        */\r\n        var date:Date = new Date();\r\n        var st: string|null = null;\r\n        \r\n        if (project === null || project === undefined) {\r\n            date = new Date();\r\n            st = null;\r\n        }\r\n        else{\r\n            if(project.SignatureDate !== undefined && project.Statut !== undefined){\r\n                date = new Date(project.SignatureDate);\r\n                st = statut[project.Statut];\r\n            }\r\n        }\r\n        \r\n\r\n            return (\r\n                <div>\r\n                    {project? ( \r\n                    <table className=\"container centered table-detail\">\r\n                        <thead>\r\n                            <tr style={{color: \"black\"}}>\r\n                            <th>Project: {project.ProjectNumber}\r\n                            <Link to={`/project-edit/${project.ProjectId}`} className=\"btn right grey waves-effect waves-light\">\r\n                                    <i className=\"material-icons\">edit</i>\r\n                                </Link>\r\n                            </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr> \r\n                                <td className=\"grey darken-2 m2 center border\">Project leader: <br/>\r\n                                {project.ProjectLeader}</td>\r\n                            </tr>\r\n                          \r\n                            <tr>\r\n                                <td className=\"grey darken-2 m2 center border\">Signature date:<br/> \r\n                                {formatDate(date)}</td> \r\n                            </tr>\r\n                          \r\n                             <tr>\r\n                                <td className=\"grey darken-2 m2 center border\">Statut:<br/>\r\n                                {st}</td>\r\n                            </tr>\r\n\r\n\r\n                            { project.Client?\r\n                                <tr>\r\n                                    <td className=\"grey darken-2 m2 center border\">Client:<br/> \r\n                                    <div>\r\n                                        \r\n                                    </div>{project.Client.Company_Name}</td>\r\n                                </tr>\r\n                                :\r\n                                <tr>\r\n                                    <td className=\"grey darken-2 m2 center border\">Pas de client</td>\r\n                                </tr>\r\n                            }\r\n                            \r\n                        </tbody>\r\n                        \r\n                    </table>\r\n                    \r\n                    ):(\r\n                        <div className=\"center object-notfound\">\r\n                            <h5>Pas de projet trouv√©</h5>\r\n                            <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n                            Home\r\n                            </Link>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            );\r\n        \r\n      \r\n}\r\n\r\nexport default ProjectDetail; "]},"metadata":{},"sourceType":"module"}