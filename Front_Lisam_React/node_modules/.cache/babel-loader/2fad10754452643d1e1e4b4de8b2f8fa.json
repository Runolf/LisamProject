{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\component\\\\project-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ProjectService from '../services/project-service';\nimport { useProjects } from '../hooks/projects-hook';\nimport '../pages/form.css';\nimport { useClients } from '../hooks/clients-hook';\n\nconst ProjectForm = ({\n  project,\n  isEditForm\n}) => {\n  const [form, setForm] = useState({\n    projectLeader: {\n      value: project.ProjectLeader\n    },\n    projectNumber: {\n      value: project.ProjectNumber\n    },\n    signatureDate: {\n      value: project.SignatureDate\n    },\n    statut: {\n      value: project.Statut\n    },\n    clientId: {\n      value: project.ClientId\n    }\n  });\n  const history = useHistory();\n  const Projects = useProjects();\n  const Clients = useClients();\n\n  const transformDateToFormDate = date => {\n    return date.slice(0, 10);\n  };\n\n  const updateProject = () => {\n    ProjectService.updateProject(project).then(() => history.push(`/project/${project.ProjectId}`)\n    /*window.location.reload()*/\n    );\n  };\n\n  const addProject = () => {\n    ProjectService.addProject(project).then(() => history.push(`/both`));\n  };\n\n  const deleteProject = () => {\n    ProjectService.deleteProject(project).then(() => history.push(`/project`));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormIsValid = validateForm();\n\n    if (isFormIsValid === true) {\n      project.ProjectLeader = form.projectLeader.value;\n      project.ProjectNumber = form.projectNumber.value;\n      project.SignatureDate = form.signatureDate.value;\n      project.Statut = form.statut.value;\n      project.ClientId = form.clientId.value;\n      isEditForm ? updateProject() : addProject();\n    }\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form;\n    const noValue = \"no value\";\n    const stringRegex = /^[A-Za-zéèàùç\\- ]+$/;\n    const numberRegex = /^[0-9 ]+$/; // PROJECT LEADER VALIDATOR\n\n    const ProjectLeader = form.projectLeader.value;\n\n    if (!stringRegex.test(ProjectLeader) || ProjectLeader === noValue || ProjectLeader === \"\") {\n      const errorMsg = \"enter valid name\";\n      const newField = {\n        value: form.projectLeader.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          projectLeader: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.projectLeader.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          projectLeader: newField\n        }\n      };\n    } //STATUT VALIDATOR\n\n\n    const validStatut = /^[1-5]$/;\n\n    if (!validStatut.test(form.statut.value)) {\n      const errorMsg = \"choose a statut\";\n      const newField = {\n        value: form.statut.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          statut: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.statut.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          statut: newField\n        }\n      };\n    } // PROJECT NUMBER VALIDATOR\n\n\n    const PNumber = Projects.map(P => P.ProjectNumber);\n    var ProjectExist = false;\n    const number = form.projectNumber.value;\n\n    if (!isEditForm) {\n      for (let test of PNumber) {\n        if (number.toUpperCase() === test.toUpperCase()) {\n          ProjectExist = true;\n          break;\n        }\n      }\n    }\n\n    if (isEditForm && number.toUpperCase() !== project.ProjectNumber.toUpperCase()) {\n      for (let test of PNumber) {\n        if (number.toUpperCase() === test.toUpperCase()) {\n          ProjectExist = true;\n          break;\n        }\n      }\n    }\n\n    if (!numberRegex.test(number) || ProjectExist === true || number === noValue || number === \"\") {\n      const errorMsg = \"Project number exist or is invalid\";\n      const newField = {\n        value: form.projectNumber.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          projectNumber: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.projectNumber.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          projectNumber: newField\n        }\n      };\n    } // ID CLIENT VALIDATOR\n\n\n    const validClient = /^[0-9]+$/;\n\n    if (!validClient.test(form.clientId.value)) {\n      const errorMsg = \"Choose a value\";\n      const newField = {\n        value: form.clientId.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          clientId: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.clientId.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          clientId: newField\n        }\n      };\n    } // DATE VALIDATOR\n\n\n    var today = new Date();\n    var dd = today.getDate().toString().padStart(2, '0');\n    var mm = (today.getMonth() + 1).toString().padStart(2, '0');\n    var yyyy = today.getFullYear().toString();\n    var currentDate = yyyy + \"-\" + mm + \"-\" + dd + \"T:00:00:00\";\n    today.setHours(0, 0, 0, 0);\n    const formDate = form.signatureDate.value;\n\n    if (formDate.toString() > currentDate) {\n      const errorMsg = \"Date must be lesser or equal to current date\";\n      const newField = {\n        value: form.signatureDate.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          signatureDate: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.signatureDate.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          signatureDate: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.statut.isValid && newForm.projectNumber.isValid && newForm.clientId.isValid && newForm.signatureDate.isValid && newForm.projectLeader.isValid === true ? true : false;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  });\n};\n\nexport default ProjectForm;","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/component/project-form.tsx"],"names":["React","useState","useHistory","ProjectService","useProjects","useClients","ProjectForm","project","isEditForm","form","setForm","projectLeader","value","ProjectLeader","projectNumber","ProjectNumber","signatureDate","SignatureDate","statut","Statut","clientId","ClientId","history","Projects","Clients","transformDateToFormDate","date","slice","updateProject","then","push","ProjectId","addProject","deleteProject","handleSubmit","e","preventDefault","isFormIsValid","validateForm","handleInputChange","fieldName","target","name","fieldValue","newField","newForm","noValue","stringRegex","numberRegex","test","errorMsg","error","isValid","validStatut","PNumber","map","P","ProjectExist","number","toUpperCase","validClient","today","Date","dd","getDate","toString","padStart","mm","getMonth","yyyy","getFullYear","currentDate","setHours","formDate"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAAOC,UAAP,QAAwB,kBAAxB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,mBAAP;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAuBA,MAAMC,WAAqC,GAAG,CAAC;AAACC,EAAAA,OAAD;AAASC,EAAAA;AAAT,CAAD,KAA0B;AAEpE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAO;AACnCU,IAAAA,aAAa,EAAE;AAACC,MAAAA,KAAK,EAAEL,OAAO,CAACM;AAAhB,KADoB;AAEnCC,IAAAA,aAAa,EAAE;AAACF,MAAAA,KAAK,EAAEL,OAAO,CAACQ;AAAhB,KAFoB;AAGnCC,IAAAA,aAAa,EAAE;AAACJ,MAAAA,KAAK,EAAEL,OAAO,CAACU;AAAhB,KAHoB;AAInCC,IAAAA,MAAM,EAAS;AAACN,MAAAA,KAAK,EAAEL,OAAO,CAACY;AAAhB,KAJoB;AAKnCC,IAAAA,QAAQ,EAAO;AAACR,MAAAA,KAAK,EAAEL,OAAO,CAACc;AAAhB;AALoB,GAAP,CAAhC;AAOA,QAAMC,OAAO,GAAGpB,UAAU,EAA1B;AACA,QAAMqB,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,OAAO,GAAGnB,UAAU,EAA1B;;AAGA,QAAMoB,uBAAuB,GAAIC,IAAD,IAA0B;AACtD,WAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,EAAb,CAAP;AACH,GAFD;;AAGA,QAAMC,aAAa,GAAG,MAAM;AACxBzB,IAAAA,cAAc,CAACyB,aAAf,CAA6BrB,OAA7B,EACCsB,IADD,CACM,MAAMP,OAAO,CAACQ,IAAR,CAAc,YAAWvB,OAAO,CAACwB,SAAU,EAA3C;AAA8C;AAD1D;AAEH,GAHD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrB7B,IAAAA,cAAc,CAAC6B,UAAf,CAA0BzB,OAA1B,EACCsB,IADD,CACM,MAAMP,OAAO,CAACQ,IAAR,CAAc,OAAd,CADZ;AAEH,GAHD;;AAIA,QAAMG,aAAa,GAAG,MAAM;AACxB9B,IAAAA,cAAc,CAAC8B,aAAf,CAA6B1B,OAA7B,EACCsB,IADD,CACM,MAAMP,OAAO,CAACQ,IAAR,CAAc,UAAd,CADZ;AAEH,GAHD;;AAKA,QAAMI,YAAY,GAAIC,CAAD,IAAwC;AACzDA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,aAAa,GAAGC,YAAY,EAAlC;;AACA,QAAGD,aAAa,KAAI,IAApB,EAAyB;AAErB9B,MAAAA,OAAO,CAACM,aAAR,GAAwBJ,IAAI,CAACE,aAAL,CAAmBC,KAA3C;AACAL,MAAAA,OAAO,CAACQ,aAAR,GAAwBN,IAAI,CAACK,aAAL,CAAmBF,KAA3C;AACAL,MAAAA,OAAO,CAACU,aAAR,GAAwBR,IAAI,CAACO,aAAL,CAAmBJ,KAA3C;AACAL,MAAAA,OAAO,CAACY,MAAR,GAAiBV,IAAI,CAACS,MAAL,CAAYN,KAA7B;AACAL,MAAAA,OAAO,CAACc,QAAR,GAAmBZ,IAAI,CAACW,QAAL,CAAcR,KAAjC;AAEAJ,MAAAA,UAAU,GAACoB,aAAa,EAAd,GAAiBI,UAAU,EAArC;AACH;AAEJ,GAdD;;AAeA,QAAMO,iBAAiB,GAAIJ,CAAD,IAA+D;AAErF,UAAMK,SAAiB,GAAGL,CAAC,CAACM,MAAF,CAASC,IAAnC;AACA,UAAMC,UAAyB,GAAGR,CAAC,CAACM,MAAF,CAAS7B,KAA3C;AAEA,UAAMgC,QAAe,GAAG;AAAC,OAACJ,SAAD,GAAc;AAAC5B,QAAAA,KAAK,EAAE+B;AAAR;AAAf,KAAxB;AACAjC,IAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,SAAGmC;AAAb,KAAD,CAAP;AACH,GAPD;;AASA,QAAMN,YAAY,GAAG,MAAM;AAEvB,QAAIO,OAAa,GAAGpC,IAApB;AACA,UAAMqC,OAAe,GAAG,UAAxB;AACA,UAAMC,WAAmB,GAAG,qBAA5B;AACA,UAAMC,WAAmB,GAAG,WAA5B,CALuB,CAOvB;;AACA,UAAMnC,aAAqB,GAAGJ,IAAI,CAACE,aAAL,CAAmBC,KAAjD;;AACA,QAAG,CAACmC,WAAW,CAACE,IAAZ,CAAiBpC,aAAjB,CAAD,IAAoCA,aAAa,KAAKiC,OAAtD,IAAiEjC,aAAa,KAAK,EAAtF,EAAyF;AACrF,YAAMqC,QAAe,GAAG,kBAAxB;AACA,YAAMN,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACE,aAAL,CAAmBC,KAA3B;AAAkCuC,QAAAA,KAAK,EAAED,QAAzC;AAAmDE,QAAAA,OAAO,EAAE;AAA5D,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAClC,UAAAA,aAAa,EAAEiC;AAAhB;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACE,aAAL,CAAmBC,KAA3B;AAAkCwC,QAAAA,OAAO,EAAE;AAA3C,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAClC,UAAAA,aAAa,EAAEiC;AAAhB;AAAhB,OAAV;AACH,KAhBsB,CAkBvB;;;AACA,UAAMS,WAAkB,GAAG,SAA3B;;AACA,QAAG,CAACA,WAAW,CAACJ,IAAZ,CAAiBxC,IAAI,CAACS,MAAL,CAAYN,KAA7B,CAAJ,EAAwC;AACpC,YAAMsC,QAAe,GAAG,iBAAxB;AACA,YAAMN,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACS,MAAL,CAAYN,KAApB;AAA2BuC,QAAAA,KAAK,EAAED,QAAlC;AAA4CE,QAAAA,OAAO,EAAE;AAArD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC3B,UAAAA,MAAM,EAAE0B;AAAT;AAAhB,OAAV;AACH,KAJD,MAIK;AACJ,YAAMA,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACS,MAAL,CAAYN,KAApB;AAA2BwC,QAAAA,OAAO,EAAE;AAApC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC3B,UAAAA,MAAM,EAAE0B;AAAT;AAAhB,OAAV;AACA,KA3BsB,CA6BvB;;;AACA,UAAMU,OAAO,GAAG/B,QAAQ,CAACgC,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACzC,aAApB,CAAhB;AACA,QAAI0C,YAAqB,GAAG,KAA5B;AACA,UAAMC,MAAc,GAAGjD,IAAI,CAACK,aAAL,CAAmBF,KAA1C;;AAEA,QAAG,CAACJ,UAAJ,EAAe;AACX,WAAI,IAAIyC,IAAR,IAAgBK,OAAhB,EAAwB;AACpB,YAAGI,MAAM,CAACC,WAAP,OAAyBV,IAAI,CAACU,WAAL,EAA5B,EAA+C;AAC3CF,UAAAA,YAAY,GAAG,IAAf;AACA;AACH;AACJ;AACJ;;AAED,QAAGjD,UAAU,IAAIkD,MAAM,CAACC,WAAP,OAA0BpD,OAAO,CAACQ,aAAR,CAAsB4C,WAAtB,EAA3C,EAA+E;AAC3E,WAAI,IAAIV,IAAR,IAAgBK,OAAhB,EAAwB;AACpB,YAAGI,MAAM,CAACC,WAAP,OAAyBV,IAAI,CAACU,WAAL,EAA5B,EAA+C;AAC3CF,UAAAA,YAAY,GAAG,IAAf;AACA;AACH;AACJ;AACJ;;AAED,QAAG,CAACT,WAAW,CAACC,IAAZ,CAAiBS,MAAjB,CAAD,IAA6BD,YAAY,KAAK,IAA9C,IAAsDC,MAAM,KAAKZ,OAAjE,IAA4EY,MAAM,KAAK,EAA1F,EAA6F;AACzF,YAAMR,QAAe,GAAG,oCAAxB;AACA,YAAMN,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACK,aAAL,CAAmBF,KAA3B;AAAkCuC,QAAAA,KAAK,EAAED,QAAzC;AAAmDE,QAAAA,OAAO,EAAE;AAA5D,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC/B,UAAAA,aAAa,EAAE8B;AAAhB;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACK,aAAL,CAAmBF,KAA3B;AAAkCwC,QAAAA,OAAO,EAAE;AAA3C,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC/B,UAAAA,aAAa,EAAE8B;AAAhB;AAAhB,OAAV;AACH,KA3DsB,CA6DvB;;;AACA,UAAMgB,WAAmB,GAAG,UAA5B;;AAEA,QAAG,CAACA,WAAW,CAACX,IAAZ,CAAiBxC,IAAI,CAACW,QAAL,CAAcR,KAA/B,CAAJ,EAA0C;AACtC,YAAMsC,QAAe,GAAG,gBAAxB;AACA,YAAMN,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACW,QAAL,CAAcR,KAAtB;AAA6BuC,QAAAA,KAAK,EAAED,QAApC;AAA8CE,QAAAA,OAAO,EAAE;AAAvD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACzB,UAAAA,QAAQ,EAAEwB;AAAX;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACW,QAAL,CAAcR,KAAtB;AAA6BwC,QAAAA,OAAO,EAAE;AAAtC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACzB,UAAAA,QAAQ,EAAEwB;AAAX;AAAhB,OAAV;AACH,KAvEsB,CAyEvB;;;AACA,QAAIiB,KAAU,GAAG,IAAIC,IAAJ,EAAjB;AACA,QAAIC,EAAE,GAAGF,KAAK,CAACG,OAAN,GAAgBC,QAAhB,GAA2BC,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAT;AACA,QAAIC,EAAE,GAAG,CAACN,KAAK,CAACO,QAAN,KAAmB,CAApB,EAAuBH,QAAvB,GAAkCC,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAAT;AACA,QAAIG,IAAI,GAAGR,KAAK,CAACS,WAAN,GAAoBL,QAApB,EAAX;AACA,QAAIM,WAAkB,GAAGF,IAAI,GAAG,GAAP,GAAaF,EAAb,GAAkB,GAAlB,GAAwBJ,EAAxB,GAA2B,YAApD;AACAF,IAAAA,KAAK,CAACW,QAAN,CAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB,CAArB;AAEA,UAAMC,QAAa,GAAGhE,IAAI,CAACO,aAAL,CAAmBJ,KAAzC;;AAEA,QAAG6D,QAAQ,CAACR,QAAT,KAAsBM,WAAzB,EAAqC;AACjC,YAAMrB,QAAe,GAAG,8CAAxB;AACA,YAAMN,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACO,aAAL,CAAmBJ,KAA3B;AAAkCuC,QAAAA,KAAK,EAAED,QAAzC;AAAmDE,QAAAA,OAAO,EAAE;AAA5D,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC7B,UAAAA,aAAa,EAAE4B;AAAhB;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAAChC,QAAAA,KAAK,EAAEH,IAAI,CAACO,aAAL,CAAmBJ,KAA3B;AAAkCwC,QAAAA,OAAO,EAAE;AAA3C,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC7B,UAAAA,aAAa,EAAE4B;AAAhB;AAAhB,OAAV;AACH;;AAEDlC,IAAAA,OAAO,CAACmC,OAAD,CAAP;AAEA,WACIA,OAAO,CAAC3B,MAAR,CAAekC,OAAf,IACAP,OAAO,CAAC/B,aAAR,CAAsBsC,OADtB,IAEAP,OAAO,CAACzB,QAAR,CAAiBgC,OAFjB,IAGAP,OAAO,CAAC7B,aAAR,CAAsBoC,OAHtB,IAIAP,OAAO,CAAClC,aAAR,CAAsByC,OAAtB,KAAkC,IAL/B,GAMD,IANC,GAMI,KANX;AAOF,GArGF;;AAuGA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAlKD;;AAoKA,eAAe9C,WAAf","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport Project from '../models/project';\r\nimport{useHistory} from 'react-router-dom';\r\nimport ProjectService from '../services/project-service';\r\nimport Client from '../models/client';\r\nimport { useProjects } from '../hooks/projects-hook';\r\nimport '../pages/form.css'; \r\nimport { useClients } from '../hooks/clients-hook';\r\nimport { statut } from '../models/statut';\r\n\r\ntype Props = {\r\n    project: Project,\r\n    client: Client,\r\n    isEditForm: Boolean\r\n}\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?:string,\r\n    isValid?: boolean\r\n  }\r\n\r\ntype Form = {\r\n    projectNumber: Field,\r\n    projectLeader: Field,   \r\n    statut: Field,\r\n    signatureDate: Field,\r\n    clientId: Field\r\n}\r\n\r\nconst ProjectForm: FunctionComponent<Props> = ({project,isEditForm}) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        projectLeader: {value: project.ProjectLeader},\r\n        projectNumber: {value: project.ProjectNumber},\r\n        signatureDate: {value: project.SignatureDate},\r\n        statut:        {value: project.Statut},\r\n        clientId :     {value: project.ClientId }\r\n    });\r\n    const history = useHistory();\r\n    const Projects = useProjects();\r\n    const Clients = useClients(); \r\n\r\n   \r\n    const transformDateToFormDate = (date: string): string => {\r\n        return date.slice(0,10);\r\n    }\r\n    const updateProject = () => {\r\n        ProjectService.updateProject(project)\r\n        .then(() => history.push(`/project/${project.ProjectId}`) /*window.location.reload()*/);\r\n    }\r\n    const addProject = () => {\r\n        ProjectService.addProject(project)\r\n        .then(() => history.push(`/both`));\r\n    }\r\n    const deleteProject = () => {\r\n        ProjectService.deleteProject(project)\r\n        .then(() => history.push(`/project`));\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault();\r\n        const isFormIsValid = validateForm();\r\n        if(isFormIsValid=== true){\r\n\r\n            project.ProjectLeader = form.projectLeader.value;\r\n            project.ProjectNumber = form.projectNumber.value;\r\n            project.SignatureDate = form.signatureDate.value;\r\n            project.Statut = form.statut.value;\r\n            project.ClientId = form.clientId.value;\r\n\r\n            isEditForm?updateProject():addProject();\r\n        }\r\n        \r\n    }\r\n    const handleInputChange = (e : React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\r\n\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string|number = e.target.value;\r\n\r\n        const newField: Field = {[fieldName] : {value: fieldValue}};\r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n    const validateForm = () => {\r\n      \r\n        let newForm: Form = form;\r\n        const noValue: string = \"no value\";\r\n        const stringRegex: RegExp = /^[A-Za-zéèàùç\\- ]+$/;\r\n        const numberRegex: RegExp = /^[0-9 ]+$/;\r\n\r\n        // PROJECT LEADER VALIDATOR\r\n        const ProjectLeader: string = form.projectLeader.value;\r\n        if(!stringRegex.test(ProjectLeader) || ProjectLeader === noValue || ProjectLeader === \"\"){\r\n            const errorMsg:string = \"enter valid name\";\r\n            const newField: Field = {value: form.projectLeader.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{projectLeader: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.projectLeader.value, isValid: true};\r\n            newForm = {...newForm, ...{projectLeader: newField}};\r\n        }\r\n\r\n        //STATUT VALIDATOR\r\n        const validStatut:RegExp = /^[1-5]$/;\r\n        if(!validStatut.test(form.statut.value)){\r\n            const errorMsg:string = \"choose a statut\";\r\n            const newField: Field = {value: form.statut.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{statut: newField}};\r\n        }else{\r\n         const newField: Field = {value: form.statut.value, isValid: true};\r\n         newForm = {...newForm, ...{statut: newField}};\r\n        }\r\n        \r\n        // PROJECT NUMBER VALIDATOR\r\n        const PNumber = Projects.map(P => P.ProjectNumber);\r\n        var ProjectExist: boolean = false;\r\n        const number: string = form.projectNumber.value;\r\n\r\n        if(!isEditForm){\r\n            for(let test of PNumber){\r\n                if(number.toUpperCase() === test.toUpperCase()){\r\n                    ProjectExist = true;\r\n                    break;\r\n                }\r\n            }   \r\n        }\r\n\r\n        if(isEditForm && number.toUpperCase() !==  project.ProjectNumber.toUpperCase()){\r\n            for(let test of PNumber){\r\n                if(number.toUpperCase() === test.toUpperCase()){\r\n                    ProjectExist = true;\r\n                    break;\r\n                }\r\n            }   \r\n        }\r\n    \r\n        if(!numberRegex.test(number) || ProjectExist === true || number === noValue || number === \"\"){\r\n            const errorMsg:string = \"Project number exist or is invalid\";\r\n            const newField: Field = {value: form.projectNumber.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{projectNumber: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.projectNumber.value, isValid: true};\r\n            newForm = {...newForm, ...{projectNumber: newField}};\r\n        }\r\n        \r\n        // ID CLIENT VALIDATOR\r\n        const validClient: RegExp = /^[0-9]+$/;\r\n      \r\n        if(!validClient.test(form.clientId.value)){\r\n            const errorMsg:string = \"Choose a value\";\r\n            const newField: Field = {value: form.clientId.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{clientId: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.clientId.value, isValid: true};\r\n            newForm = {...newForm, ...{clientId: newField}};\r\n        }\r\n        \r\n        // DATE VALIDATOR\r\n        var today:Date = new Date();\r\n        var dd = today.getDate().toString().padStart(2, '0');\r\n        var mm = (today.getMonth() + 1).toString().padStart(2, '0');\r\n        var yyyy = today.getFullYear().toString();\r\n        var currentDate:String = yyyy + \"-\" + mm + \"-\" + dd+\"T:00:00:00\";\r\n        today.setHours(0,0,0,0);\r\n        \r\n        const formDate:Date = form.signatureDate.value;\r\n       \r\n        if(formDate.toString() > currentDate){\r\n            const errorMsg:string = \"Date must be lesser or equal to current date\";\r\n            const newField: Field = {value: form.signatureDate.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{signatureDate: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.signatureDate.value, isValid: true};\r\n            newForm = {...newForm, ...{signatureDate: newField}};\r\n        }\r\n\r\n        setForm(newForm);\r\n \r\n        return (\r\n            newForm.statut.isValid && \r\n            newForm.projectNumber.isValid && \r\n            newForm.clientId.isValid  && \r\n            newForm.signatureDate.isValid &&\r\n            newForm.projectLeader.isValid === true\r\n            )?true:false;\r\n     }\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectForm;\r\n"]},"metadata":{},"sourceType":"module"}