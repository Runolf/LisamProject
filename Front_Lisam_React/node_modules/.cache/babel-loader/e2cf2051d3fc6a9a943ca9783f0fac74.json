{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\component\\\\project-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport ProjectService from '../services/project-service';\nimport { useProjects } from '../hooks/projects-hook';\nimport '../pages/form.css';\nimport { useClients } from '../hooks/clients-hook'; // import Select from 'react-select';\n\nconst ProjectForm = ({\n  project,\n  isEditForm\n}) => {\n  // const options = [\n  //     { value: statut.Closed, label: 'Closed' },\n  //     { value: statut.Factured, label: 'Factured' },\n  //     { value: statut.Open, label: 'Open' },\n  //     { value: statut.Signed ,label: 'Signed' } ,\n  //     { value: statut.Work_in_progress ,label: 'Work in progress' }\n  //   ];\n  const [form, setForm] = useState({\n    projectLeader: {\n      value: project.ProjectLeader\n    },\n    projectNumber: {\n      value: project.ProjectNumber\n    },\n    signatureDate: {\n      value: project.SignatureDate\n    },\n    statut: {\n      value: project.Statut\n    },\n    clientId: {\n      value: project.ClientId\n    }\n  });\n  const history = useHistory();\n  const Projects = useProjects();\n  const Clients = useClients();\n\n  const transformDateToFormDate = date => {\n    return date.slice(0, 10);\n  };\n\n  const updateProject = () => {\n    ProjectService.updateProject(project).then(() => history.push(`/project/${project.ProjectId}`)\n    /*window.location.reload()*/\n    );\n  };\n\n  const addProject = () => {\n    ProjectService.addProject(project).then(() => history.push(`/project`));\n  };\n\n  const deleteProject = () => {\n    ProjectService.deleteProject(project).then(() => history.push(`/project`));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormIsValid = validateForm();\n\n    if (isFormIsValid === true) {\n      project.ProjectLeader = form.projectLeader.value;\n      project.ProjectNumber = form.projectNumber.value;\n      project.SignatureDate = form.signatureDate.value;\n      project.Statut = form.statut.value;\n      project.ClientId = form.clientId.value;\n      isEditForm ? updateProject() : addProject();\n    }\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const handleSelectChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form;\n    const noValue = \"no value\";\n    const stringRegex = /^[A-Za-zéèàù\\- ]+$/;\n    const numberRegex = /^[0-9 ]+$/; // PROJECT LEADER VALIDATOR\n\n    const ProjectLeader = form.projectLeader.value;\n\n    if (!stringRegex.test(ProjectLeader) || ProjectLeader === noValue || ProjectLeader === \"\") {\n      const errorMsg = \"enter valid name\";\n      const newField = {\n        value: form.projectLeader.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          projectLeader: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.projectLeader.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          projectLeader: newField\n        }\n      };\n    } //STATUT VALIDATOR\n\n\n    const validStatut = /^[1-5]$/;\n\n    if (!validStatut.test(form.statut.value)) {\n      const errorMsg = \"enter a valid statut for : \";\n      const newField = {\n        value: form.statut.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          statut: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.statut.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          statut: newField\n        }\n      };\n    } // PROJECT NUMBER VALIDATOR\n\n\n    const PNumber = Projects.map(P => P.ProjectNumber);\n    var ProjectExist = false;\n    const number = form.projectNumber.value;\n\n    if (!isEditForm) {\n      for (let test of PNumber) {\n        if (number.toUpperCase() === test.toUpperCase()) {\n          ProjectExist = true;\n          break;\n        }\n      }\n    }\n\n    if (isEditForm && number.toUpperCase() !== project.ProjectNumber.toUpperCase()) {\n      for (let test of PNumber) {\n        if (number.toUpperCase() === test.toUpperCase()) {\n          ProjectExist = true;\n          break;\n        }\n      }\n    }\n\n    if (!numberRegex.test(number) || ProjectExist === true || number === noValue || number === \"\") {\n      const errorMsg = \"Project number exist or is invalid\";\n      const newField = {\n        value: form.projectNumber.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          projectNumber: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.projectNumber.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          projectNumber: newField\n        }\n      };\n    } // ID CLIENT VALIDATOR\n\n\n    const validClient = /^[0-9]+$/;\n    var idExist = false;\n    var idS = Clients.map(C => C.ClientId);\n\n    for (let test of idS) {\n      if (form.clientId.value === test.toString()) {\n        idExist = true;\n        break;\n      }\n    }\n\n    if (!validClient.test(form.clientId.value) || form.clientId.value === \"0\" || !idExist) {\n      const errorMsg = \"Id Client is equal or below to 0 or must be a number\";\n      const newField = {\n        value: form.clientId.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          clientId: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.clientId.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          clientId: newField\n        }\n      };\n    } // DATE VALIDATOR\n\n\n    var today = new Date();\n    var dd = today.getDate().toString().padStart(2, '0');\n    var mm = (today.getMonth() + 1).toString().padStart(2, '0');\n    var yyyy = today.getFullYear().toString();\n    var currentDate = yyyy + \"-\" + mm + \"-\" + dd;\n    today.setHours(0, 0, 0, 0);\n    const formDate = form.signatureDate.value;\n\n    if (formDate.toString() > currentDate) {\n      const errorMsg = \"Date must be lesser or equal to current date\";\n      const newField = {\n        value: form.signatureDate.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          signatureDate: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.signatureDate.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          signatureDate: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.statut.isValid && newForm.projectNumber.isValid && newForm.clientId.isValid && newForm.signatureDate.isValid && newForm.projectLeader.isValid === true ? true : false;\n  };\n\n  return React.createElement(\"form\", {\n    className: \"container\",\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, isEditForm ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"center\",\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"Edit \", project.ProjectNumber, React.createElement(\"span\", {\n    className: \"btn-floating right waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons grey\",\n    onClick: deleteProject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"delete\")))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"center\",\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Add project\")))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, form.projectNumber.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"projectNumber\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \"project Number: \", form.projectNumber.error) : React.createElement(\"label\", {\n    htmlFor: \"projectNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"project Number\"), React.createElement(\"input\", {\n    id: \"projectNumber\",\n    name: \"projectNumber\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.projectNumber.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, form.projectLeader.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"projectLeader\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"project Leader: \", form.projectLeader.error) : React.createElement(\"label\", {\n    htmlFor: \"projectLeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"project Leader\"), React.createElement(\"input\", {\n    id: \"projectLeader\",\n    name: \"projectLeader\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.projectLeader.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  })), isEditForm ? React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, form.signatureDate.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"signatureDate\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"signature Date : \", form.signatureDate.error) : React.createElement(\"label\", {\n    htmlFor: \"signatureDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"signature Date\"), React.createElement(\"input\", {\n    id: \"signatureDate\",\n    name: \"signatureDate\",\n    type: \"date\",\n    className: \"form-control\",\n    value: transformDateToFormDate(form.signatureDate.value),\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, form.signatureDate.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"signatureDate\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"signature Date : \", form.signatureDate.error) : React.createElement(\"label\", {\n    htmlFor: \"signatureDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"signature Date\"), React.createElement(\"input\", {\n    id: \"signatureDate\",\n    name: \"signatureDate\",\n    type: \"date\",\n    className: \"form-control\",\n    value: form.signatureDate.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, form.clientId.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"Client\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"Client: \", form.clientId.error) : React.createElement(\"label\", {\n    htmlFor: \"Client\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"Client\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }), React.createElement(Link, {\n    to: \"/client\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \"List of clients by identifiant\"), React.createElement(\"input\", {\n    id: \"Client\",\n    name: \"clientId\",\n    value: form.clientId.value,\n    type: \"number\",\n    className: \"form-control\",\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn grey darken-3 waves-effect waves-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nexport default ProjectForm;","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/component/project-form.tsx"],"names":["React","useState","useHistory","Link","ProjectService","useProjects","useClients","ProjectForm","project","isEditForm","form","setForm","projectLeader","value","ProjectLeader","projectNumber","ProjectNumber","signatureDate","SignatureDate","statut","Statut","clientId","ClientId","history","Projects","Clients","transformDateToFormDate","date","slice","updateProject","then","push","ProjectId","addProject","deleteProject","handleSubmit","e","preventDefault","isFormIsValid","validateForm","handleInputChange","fieldName","target","name","fieldValue","newField","handleSelectChange","newForm","noValue","stringRegex","numberRegex","test","errorMsg","error","isValid","validStatut","PNumber","map","P","ProjectExist","number","toUpperCase","validClient","idExist","idS","C","toString","today","Date","dd","getDate","padStart","mm","getMonth","yyyy","getFullYear","currentDate","setHours","formDate","color"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport Project from '../models/project';\r\nimport{useHistory, Link} from 'react-router-dom';\r\nimport ProjectService from '../services/project-service';\r\nimport Client from '../models/client';\r\nimport { useProjects } from '../hooks/projects-hook';\r\nimport '../pages/form.css'; \r\nimport { useClients } from '../hooks/clients-hook';\r\n// import Select from 'react-select';\r\nimport { statut } from '../models/statut';\r\n\r\ntype Props = {\r\n    project: Project,\r\n    client: Client,\r\n    isEditForm: Boolean\r\n}\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?:string,\r\n    isValid?: boolean\r\n  }\r\n\r\ntype Form = {\r\n    projectNumber: Field,\r\n    projectLeader: Field,   \r\n    statut: Field,\r\n    signatureDate: Field,\r\n    clientId: Field\r\n    /*\r\n     Champ pour ajouter le client -> faire une methode pour l'assigner.\r\n     Idée: faire aussi un bouton pour accéder au formulaire de création de client\r\n     */\r\n}\r\n\r\nconst ProjectForm: FunctionComponent<Props> = ({project,isEditForm}) => {\r\n\r\n    // const options = [\r\n    //     { value: statut.Closed, label: 'Closed' },\r\n    //     { value: statut.Factured, label: 'Factured' },\r\n    //     { value: statut.Open, label: 'Open' },\r\n    //     { value: statut.Signed ,label: 'Signed' } ,\r\n    //     { value: statut.Work_in_progress ,label: 'Work in progress' }\r\n    //   ];\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        projectLeader: {value: project.ProjectLeader},\r\n        projectNumber: {value: project.ProjectNumber},\r\n        signatureDate: {value: project.SignatureDate},\r\n        statut:        {value: project.Statut},\r\n        clientId :     {value: project.ClientId }\r\n    });\r\n    const history = useHistory();\r\n    const Projects = useProjects();\r\n    const Clients = useClients();\r\n\r\n    const transformDateToFormDate = (date: string): string => {\r\n        return date.slice(0,10);\r\n    }\r\n    const updateProject = () => {\r\n        ProjectService.updateProject(project)\r\n        .then(() => history.push(`/project/${project.ProjectId}`) /*window.location.reload()*/);\r\n    }\r\n    const addProject = () => {\r\n        ProjectService.addProject(project)\r\n        .then(() => history.push(`/project`));\r\n    }\r\n    const deleteProject = () => {\r\n        ProjectService.deleteProject(project)\r\n        .then(() => history.push(`/project`));\r\n    }\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault();\r\n        const isFormIsValid = validateForm();\r\n        if(isFormIsValid=== true){\r\n\r\n            project.ProjectLeader = form.projectLeader.value;\r\n            project.ProjectNumber = form.projectNumber.value;\r\n            project.SignatureDate = form.signatureDate.value;\r\n            project.Statut = form.statut.value;\r\n            project.ClientId = form.clientId.value;\r\n\r\n            isEditForm?updateProject():addProject();\r\n        }\r\n        \r\n    }\r\n    const handleInputChange = (e : React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string|number = e.target.value;\r\n\r\n        const newField: Field = {[fieldName] : {value: fieldValue}};\r\n        setForm({...form, ...newField});\r\n    }\r\n    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n         const fieldName: string = e.target.name;\r\n         const fieldValue: string = e.target.value;\r\n\r\n         const newField: Field = {[fieldName] : {value: fieldValue}};\r\n         setForm({...form, ...newField});\r\n    }\r\n    const validateForm = () => {\r\n      \r\n        let newForm: Form = form;\r\n        const noValue: string = \"no value\";\r\n        const stringRegex: RegExp = /^[A-Za-zéèàù\\- ]+$/;\r\n        const numberRegex: RegExp = /^[0-9 ]+$/;\r\n\r\n        // PROJECT LEADER VALIDATOR\r\n        const ProjectLeader: string = form.projectLeader.value;\r\n        if(!stringRegex.test(ProjectLeader) || ProjectLeader === noValue || ProjectLeader === \"\"){\r\n            const errorMsg:string = \"enter valid name\";\r\n            const newField: Field = {value: form.projectLeader.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{projectLeader: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.projectLeader.value, isValid: true};\r\n            newForm = {...newForm, ...{projectLeader: newField}};\r\n        }\r\n\r\n        //STATUT VALIDATOR\r\n        const validStatut:RegExp = /^[1-5]$/;\r\n        if(!validStatut.test(form.statut.value)){\r\n            const errorMsg:string = \"enter a valid statut for : \";\r\n            const newField: Field = {value: form.statut.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{statut: newField}};\r\n        }else{\r\n         const newField: Field = {value: form.statut.value, isValid: true};\r\n         newForm = {...newForm, ...{statut: newField}};\r\n        }\r\n        \r\n        // PROJECT NUMBER VALIDATOR\r\n        const PNumber = Projects.map(P => P.ProjectNumber);\r\n        var ProjectExist: boolean = false;\r\n        const number: string = form.projectNumber.value;\r\n\r\n        if(!isEditForm){\r\n            for(let test of PNumber){\r\n                if(number.toUpperCase() === test.toUpperCase()){\r\n                    ProjectExist = true;\r\n                    break;\r\n                }\r\n            }   \r\n        }\r\n\r\n        if(isEditForm && number.toUpperCase() !==  project.ProjectNumber.toUpperCase()){\r\n            for(let test of PNumber){\r\n                if(number.toUpperCase() === test.toUpperCase()){\r\n                    ProjectExist = true;\r\n                    break;\r\n                }\r\n            }   \r\n        }\r\n    \r\n        if(!numberRegex.test(number) || ProjectExist === true || number === noValue || number === \"\"){\r\n            const errorMsg:string = \"Project number exist or is invalid\";\r\n            const newField: Field = {value: form.projectNumber.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{projectNumber: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.projectNumber.value, isValid: true};\r\n            newForm = {...newForm, ...{projectNumber: newField}};\r\n        }\r\n        \r\n        // ID CLIENT VALIDATOR\r\n        const validClient: RegExp = /^[0-9]+$/;\r\n        var idExist: boolean = false; \r\n        var idS = Clients.map(C => C.ClientId);\r\n        for(let test of idS){\r\n            if(form.clientId.value === test.toString()){\r\n                idExist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(!validClient.test(form.clientId.value) || form.clientId.value === \"0\" || !idExist){\r\n            const errorMsg:string = \"Id Client is equal or below to 0 or must be a number\";\r\n            const newField: Field = {value: form.clientId.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{clientId: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.clientId.value, isValid: true};\r\n            newForm = {...newForm, ...{clientId: newField}};\r\n        }\r\n        \r\n        // DATE VALIDATOR\r\n        var today:Date = new Date();\r\n        var dd = today.getDate().toString().padStart(2, '0');\r\n        var mm = (today.getMonth() + 1).toString().padStart(2, '0');\r\n        var yyyy = today.getFullYear().toString();\r\n        var currentDate:String = yyyy + \"-\" + mm + \"-\" + dd;\r\n        today.setHours(0,0,0,0);\r\n\r\n        const formDate:Date = form.signatureDate.value;\r\n       \r\n        if(formDate.toString() > currentDate){\r\n            const errorMsg:string = \"Date must be lesser or equal to current date\";\r\n            const newField: Field = {value: form.signatureDate.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{signatureDate: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.signatureDate.value, isValid: true};\r\n            newForm = {...newForm, ...{signatureDate: newField}};\r\n        }\r\n\r\n        setForm(newForm);\r\n \r\n        return (\r\n            newForm.statut.isValid && \r\n            newForm.projectNumber.isValid && \r\n            newForm.clientId.isValid  && \r\n            newForm.signatureDate.isValid &&\r\n            newForm.projectLeader.isValid === true\r\n            )?true:false;\r\n     }\r\n\r\n\r\n    return(\r\n        <form className=\"container\" onSubmit={e => handleSubmit(e)}>\r\n\r\n            <div>{/*is editForm */}\r\n                <div> \r\n                        {isEditForm? (\r\n                            <div>\r\n                                <h3 className=\"center\" style={{color: 'black'}}>Edit {project.ProjectNumber}\r\n                                <span className=\"btn-floating right waves-effect waves-light\">\r\n                                    <i className=\"material-icons grey\" onClick={deleteProject}>delete</i>\r\n                                </span>\r\n                                </h3>\r\n\r\n                            </div>\r\n                        ):(\r\n                            <div>\r\n                                <h3 className=\"center\" style={{color: 'black'}}>Add project</h3>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {\r\n            /* <div className=\"form-group\">\r\n              <label> choisissez le statut\r\n                  <Select options = {options} onChange={e => handleSelectChange(e)}/>\r\n              </label>\r\n            </div> */\r\n            }\r\n\r\n            <br/><br/>\r\n\r\n            {/*Project number*/}\r\n            <div className=\"form-group\">\r\n                { \r\n                    form.projectNumber.isValid===false?<label htmlFor=\"projectNumber\" style={{color: 'red'}}>project Number: {form.projectNumber.error}</label>\r\n                    : <label htmlFor=\"projectNumber\">project Number</label>\r\n                }\r\n               <input id=\"projectNumber\" name=\"projectNumber\" type=\"text\" className=\"form-control\" value={form.projectNumber.value} onChange={e => handleInputChange(e)}></input>\r\n            </div>\r\n\r\n            {/*Project leader*/}\r\n            <div className=\"form-group\">\r\n            {form.projectLeader.isValid === false?<label htmlFor=\"projectLeader\"  style={{color: 'red'}}>project Leader: {form.projectLeader.error}</label>:<label htmlFor=\"projectLeader\">project Leader</label> }\r\n              \r\n               <input id=\"projectLeader\" name=\"projectLeader\" type=\"text\" className=\"form-control\" value={form.projectLeader.value} onChange={e => handleInputChange(e)}></input>\r\n            </div>\r\n\r\n            {/*status*/}\r\n            {/* <div className=\"form-group\">\r\n            {form.statut.isValid === false?<label htmlFor=\"statut\"  style={{color: 'red'}}>{form.statut.error}1 open | 2 signed | 3 factured | 4 work in progress | 5 closed</label> : <label htmlFor=\"statut\">statut: 1 open | 2 signed | 3 factured | 4 work in progress | 5 closed</label> }\r\n              \r\n               <input id=\"statut\" name=\"statut\" type=\"text\" className=\"form-control\" value={form.statut.value} onChange={e => handleInputChange(e)}></input>\r\n        \r\n            </div> */}\r\n\r\n            \r\n            {/*Signature date*/}\r\n            {isEditForm? \r\n                <div className=\"form-group\">\r\n                    {form.signatureDate.isValid === false?<label htmlFor=\"signatureDate\" style={{color: 'red'}}>signature Date : {form.signatureDate.error}</label>:<label htmlFor=\"signatureDate\">signature Date</label>}             \r\n                    <input id=\"signatureDate\" name=\"signatureDate\" type=\"date\" className=\"form-control\" value={transformDateToFormDate(form.signatureDate.value)} onChange={e => handleInputChange(e)}></input>\r\n                </div>\r\n                :\r\n                <div className=\"form-group\">\r\n                    {form.signatureDate.isValid === false?<label htmlFor=\"signatureDate\" style={{color: 'red'}}>signature Date : {form.signatureDate.error}</label>:<label htmlFor=\"signatureDate\">signature Date</label>}             \r\n                    <input id=\"signatureDate\" name=\"signatureDate\" type=\"date\" className=\"form-control\" value={form.signatureDate.value} onChange={e => handleInputChange(e)}></input>\r\n                </div>\r\n            }\r\n            \r\n\r\n            {/*ClientId*/}\r\n            <div className=\"form-group\">\r\n            { form.clientId.isValid === false?<label htmlFor=\"Client\" style={{color: 'red'}}>Client: {form.clientId.error}</label>:<label htmlFor=\"Client\">Client</label>}\r\n                 <br/>\r\n                <Link to=\"/client\" target=\"_blank\">List of clients by identifiant</Link>\r\n                <input id=\"Client\" name=\"clientId\" value={form.clientId.value } type=\"number\" className=\"form-control\" onChange={e => handleInputChange(e)}></input>\r\n            </div>\r\n\r\n              {/*Test of select tag for statuts*/}\r\n        \r\n            \r\n\r\n            <button type=\"submit\" className=\"btn grey darken-3 waves-effect waves-black\">Submit</button>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ProjectForm;\r\n"]},"metadata":{},"sourceType":"module"}