{"ast":null,"code":"export default class ProjectService {\n  static getProjects() {\n    return fetch('http://localhost:44331/api/Projects').then(response => response.json()).catch(error => this.handleError(error)); //debugger;\n    //return res;\n  }\n\n  static getProject(id) {\n    return fetch(`http://localhost:44331/api/Projects/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static addProject(project) {\n    delete project.ProjectId;\n    delete project.Client;\n    return fetch(`http://localhost:44331/api/Projects`, {\n      method: 'POST',\n      body: JSON.stringify(project),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static updateProject(project) {\n    return fetch(`http://localhost:44331/api/Projects/${project.ProjectId}`, {\n      method: 'PUT',\n      body: JSON.stringify(project),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deleteProject(project) {\n    return fetch(`http://localhost:44331/api/Projects/${project.ProjectId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Runolf/Documents/GitHub/LisamProject/Front_Lisam_React/src/services/project-service.ts"],"names":["ProjectService","getProjects","fetch","then","response","json","catch","error","handleError","getProject","id","data","isEmpty","addProject","project","ProjectId","Client","method","body","JSON","stringify","headers","updateProject","deleteProject","Object","keys","length","console"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAAoB;AAC/B,SAAOC,WAAP,GAAyC;AACzC,WAAQC,KAAK,CAAC,qCAAD,CAAL,CACDC,IADC,CACIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADhB,EAEDC,KAFC,CAEKC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFd,CAAR,CADyC,CAInC;AACA;AACH;;AAGD,SAAOE,UAAP,CAAkBC,EAAlB,EAAqD;AACnD,WAAOR,KAAK,CAAE,uCAAsCQ,EAAG,EAA3C,CAAL,CACJP,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECQ,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAmB,IAAnB,GAAwBA,IAFjC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAED,SAAOM,UAAP,CAAkBC,OAAlB,EAAqD;AAEnD,WAAOA,OAAO,CAACC,SAAf;AACA,WAAOD,OAAO,CAACE,MAAf;AAGC,WAAOd,KAAK,CAAE,qCAAF,EAAuC;AACnDe,MAAAA,MAAM,EAAE,MAD2C;AAEnDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAF6C;AAGnDO,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAH0C,KAAvC,CAAL,CAKNlB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAED,SAAOe,aAAP,CAAqBR,OAArB,EAAwD;AAEvD,WAAOZ,KAAK,CAAE,uCAAsCY,OAAO,CAACC,SAAU,EAA1D,EAA4D;AACxEE,MAAAA,MAAM,EAAE,KADgE;AAExEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFkE;AAGxEO,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAH+D,KAA5D,CAAL,CAKNlB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAED,SAAOgB,aAAP,CAAqBT,OAArB,EAAmD;AAEjD,WAAOZ,KAAK,CAAE,uCAAsCY,OAAO,CAACC,SAAU,EAA1D,EAA4D;AACxEE,MAAAA,MAAM,EAAE,QADgE;AAExEI,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAF+D,KAA5D,CAAL,CAINlB,IAJM,CAIDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJX,EAKNC,KALM,CAKAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CALT,CAAP;AAMH;;AAEK,SAAOK,OAAP,CAAeD,IAAf,EAAsC;AACpC,WAAOa,MAAM,CAACC,IAAP,CAAYd,IAAZ,EAAkBe,MAAlB,KAA6B,CAApC;AACD;;AAED,SAAOlB,WAAP,CAAmBD,KAAnB,EAAuC;AACrCoB,IAAAA,OAAO,CAACpB,KAAR,CAAcA,KAAd;AACD;;AA3D4B","sourcesContent":["import Project from '../models/project';\r\n\r\nexport default class ProjectService{\r\n    static getProjects(): Promise<Project[]> {\r\n    return  fetch('http://localhost:44331/api/Projects')\r\n          .then(response => response.json())\r\n          .catch(error => this.handleError(error));\r\n          //debugger;\r\n          //return res;\r\n      }\r\n\r\n\r\n      static getProject(id: number): Promise<Project|null> {\r\n        return fetch(`http://localhost:44331/api/Projects/${id}`)\r\n          .then(response => response.json())\r\n          .then(data => this.isEmpty(data)?null:data)\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n      static addProject(project: Project): Promise<Project>{\r\n\r\n        delete project.ProjectId;\r\n        delete project.Client; \r\n\r\n\r\n         return fetch(`http://localhost:44331/api/Projects`,{\r\n         method: 'POST',\r\n         body: JSON.stringify(project),\r\n         headers: {'Content-Type': 'application/json'}\r\n       })\r\n         .then(response => response.json())\r\n         .catch(error => this.handleError(error));\r\n     }\r\n\r\n     static updateProject(project: Project): Promise<Project>{\r\n\r\n      return fetch(`http://localhost:44331/api/Projects/${project.ProjectId}`,{\r\n      method: 'PUT',\r\n      body: JSON.stringify(project),\r\n      headers: {'Content-Type': 'application/json'}\r\n    })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static deleteProject(project: Project): Promise<{}>{\r\n\r\n    return fetch(`http://localhost:44331/api/Projects/${project.ProjectId}`,{\r\n    method: 'DELETE',\r\n    headers: {'Content-Type': 'application/json'}\r\n  })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n}\r\n\r\n      static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n      }\r\n\r\n      static handleError(error: Error): void {\r\n        console.error(error);\r\n      }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}