{"ast":null,"code":"export default class ClientService {\n  static getClients() {\n    return fetch('http://localhost:44331/api/Client').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static addClient(client) {\n    return fetch(`http://localhost:44331/api/Client`, {\n      method: 'POST',\n      body: JSON.stringify(pokemon),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/services/client-services.ts"],"names":["ClientService","getClients","fetch","then","response","json","catch","error","handleError","addClient","client","method","body","JSON","stringify","pokemon","headers","isEmpty","data","Object","keys","length","console"],"mappings":"AAEA,eAAe,MAAMA,aAAN,CAAmB;AAC9B,SAAOC,UAAP,GAAuC;AACnC,WAAOC,KAAK,CAAC,mCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAEH,SAAOE,SAAP,CAAiBC,MAAjB,EAAiD;AAE7C,WAAOR,KAAK,CAAE,mCAAF,EAAqC;AACjDS,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,OAAf,CAF2C;AAGjDC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHwC,KAArC,CAAL,CAKNb,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAGC,SAAOU,OAAP,CAAeC,IAAf,EAAsC;AACpC,WAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,KAA6B,CAApC;AACD;;AAED,SAAOb,WAAP,CAAmBD,KAAnB,EAAuC;AACrCe,IAAAA,OAAO,CAACf,KAAR,CAAcA,KAAd;AACD;;AAzB2B","sourcesContent":["import Client from '../models/client';\r\n\r\nexport default class ClientService{ \r\n    static getClients(): Promise<Client[]> {\r\n        return fetch('http://localhost:44331/api/Client')\r\n          .then(response => response.json())\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n    static addClient(client: Client): Promise<Client>{\r\n\r\n        return fetch(`http://localhost:44331/api/Client`,{\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: {'Content-Type': 'application/json'} \r\n      })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n    } \r\n\r\n\r\n      static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n      }\r\n    \r\n      static handleError(error: Error): void {\r\n        console.error(error);\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}