{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\pages\\\\bothlist.tsx\";\nimport React from 'react';\nimport CandP from '../component/client-and-project-card';\nimport './list.css';\nimport { useProject } from '../hooks/project-hook';\nimport { useClient } from '../hooks/client-hook';\nexport const BothList = () => {\n  const projects = useProject();\n  const clients = useClient();\n\n  const getProject = idCLient => {\n    /*\r\n               1) comparer le param idClient avec tout les id des objets clients\r\n               2) retourne l'id de de la FK du priject de ce client \r\n               3) \r\n               4) \r\n           */\n    try {\n      //Le client correspondant à l'id passé en param\n      var idC = clients.findIndex(element => element.ClientId === idCLient);\n      var idPC = projects.indexOf();\n      var ProjFound = projects.find(element => element.ProjectId === idPC);\n      var client = clients.find(function (element) {\n        if (element !== undefined && element.ClientId === idCLient) {\n          return element;\n        }\n      }); // doit retourner le poject correspondant à l'id trouvé au dessus. \"idProjectFromClient\"\n\n      var found = projects.find(function (element) {\n        if (client !== undefined && element.ProjectId === client.ProjectId) {\n          return element;\n        }\n      });\n      return found;\n    } catch (error) {\n      return error;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"col grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, clients.map(C => React.createElement(CandP, {\n    key: C.ClientId,\n    client: C,\n    project: getProject(C.ClientId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/pages/bothlist.tsx"],"names":["React","CandP","useProject","useClient","BothList","projects","clients","getProject","idCLient","idC","findIndex","element","ClientId","idPC","indexOf","ProjFound","find","ProjectId","client","undefined","found","error","map","C"],"mappings":";AAAA,OAAOA,KAAP,MAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,sCAAlB;AAGA,OAAO,YAAP;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAGA,OAAO,MAAMC,QAA2B,GAAG,MAAK;AAC5C,QAAMC,QAAQ,GAAGH,UAAU,EAA3B;AACA,QAAMI,OAAO,GAAGH,SAAS,EAAzB;;AAEA,QAAMI,UAAU,GAAIC,QAAD,IAA+B;AAC7C;;;;;;AAOD,QAAI;AAEA;AAGA,UAAIC,GAAG,GAAIH,OAAO,CAACI,SAAR,CAAmBC,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqBJ,QAApD,CAAX;AACA,UAAIK,IAAI,GAAGR,QAAQ,CAACS,OAAT,EAAX;AACA,UAAIC,SAAS,GAAGV,QAAQ,CAACW,IAAT,CAAeL,OAAD,IAAaA,OAAO,CAACM,SAAR,KAAsBJ,IAAjD,CAAhB;AAGA,UAAIK,MAAM,GAAGZ,OAAO,CAACU,IAAR,CAAa,UAASL,OAAT,EAAiB;AAEvC,YAAGA,OAAO,KAAKQ,SAAZ,IAAyBR,OAAO,CAACC,QAAR,KAAqBJ,QAAjD,EAA0D;AACzD,iBAAOG,OAAP;AACA;AACH,OALW,CAAb,CAVA,CAgBA;;AACA,UAAIS,KAAK,GAAIf,QAAQ,CAACW,IAAT,CAAc,UAASL,OAAT,EAAiB;AAExC,YAAGO,MAAM,KAAKC,SAAX,IAAwBR,OAAO,CAACM,SAAR,KAAsBC,MAAM,CAACD,SAAxD,EAAkE;AAE9D,iBAAON,OAAP;AACH;AAEJ,OAPY,CAAb;AASA,aAAOS,KAAP;AAEH,KA5BD,CA4BE,OAAOC,KAAP,EAAc;AACZ,aAAOA,KAAP;AACH;AAGJ,GAzCD;;AA2CA,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGQf,OAAO,CAACgB,GAAR,CAAaC,CAAD,IAAO,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,CAAC,CAACX,QAAd;AAAwB,IAAA,MAAM,EAAEW,CAAhC;AAAmC,IAAA,OAAO,EACrDhB,UAAU,CAACgB,CAAC,CAACX,QAAH,CADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,CAHR,CADJ;AAWH,CA1DM","sourcesContent":["import React, {FunctionComponent} from 'react';\r\nimport CandP from '../component/client-and-project-card';\r\nimport Project from '../models/project';\r\nimport Client from '../models/client';\r\nimport './list.css';\r\nimport { useProject } from '../hooks/project-hook';\r\nimport { useClient } from '../hooks/client-hook';\r\nimport { isUndefined } from 'util';\r\n\r\nexport const BothList: FunctionComponent = () =>{\r\n    const projects = useProject();\r\n    const clients = useClient();\r\n\r\n    const getProject = (idCLient: number): Project => {\r\n         /*\r\n                    1) comparer le param idClient avec tout les id des objets clients\r\n                    2) retourne l'id de de la FK du priject de ce client \r\n                    3) \r\n                    4) \r\n                */\r\n\r\n        try {\r\n            \r\n            //Le client correspondant à l'id passé en param\r\n            \r\n\r\n            var idC =  clients.findIndex((element) => element.ClientId === idCLient);\r\n            var idPC = projects.indexOf();\r\n            var ProjFound = projects.find((element) => element.ProjectId === idPC);\r\n\r\n            \r\n            var client = clients.find(function(element){\r\n               \r\n                if(element !== undefined && element.ClientId === idCLient){\r\n                 return element;\r\n                }\r\n             }); \r\n            // doit retourner le poject correspondant à l'id trouvé au dessus. \"idProjectFromClient\"\r\n            var found =  projects.find(function(element){\r\n               \r\n                if(client !== undefined && element.ProjectId === client.ProjectId){\r\n                    \r\n                    return element;\r\n                }\r\n                \r\n            });\r\n\r\n            return found;\r\n\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n      \r\n       \r\n    }\r\n\r\n    return (\r\n        <div className=\"col grid\">\r\n            { \r\n               \r\n                clients.map((C) => <CandP key={C.ClientId} client={C} project={\r\n                        getProject(C.ClientId)\r\n                }/>)\r\n            }\r\n            \r\n        </div>\r\n    )\r\n} \r\n\r\n"]},"metadata":{},"sourceType":"module"}