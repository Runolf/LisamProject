{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\component\\\\client-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ClientService from '../services/client-services';\nimport { useClients } from '../hooks/clients-hook';\nimport '../pages/form.css';\nimport ProjectService from '../services/project-service';\n\nconst ClientForm = ({\n  client,\n  isEditForm\n}) => {\n  const [form, setForm] = useState({\n    companyName: {\n      value: client.Company_Name\n    },\n    email: {\n      value: client.Email\n    },\n    language: {\n      value: client.Language\n    },\n    number: {\n      value: client.Number\n    },\n    city: {\n      value: client.City\n    },\n    street: {\n      value: client.Street\n    },\n    zipCode: {\n      value: client.ZipCode\n    }\n  });\n  const history = useHistory();\n  const Clients = useClients();\n\n  const updateClient = () => {\n    ClientService.updateClient(client).then(() => history.push(`/client/${client.ClientId}`));\n  };\n\n  const addClient = () => {\n    ClientService.addClient(client).then(() => history.push(`/client`));\n  };\n\n  const deleteClient = () => {\n    client.Projects.map(P => ProjectService.deleteProject(P));\n    ClientService.deleteClient(client).then(() => history.push(`/client`));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid === true) {\n      client.Company_Name = form.companyName.value;\n      client.Email = form.email.value;\n      client.Language = form.language.value;\n      client.Number = form.number.value;\n      client.City = form.city.value;\n      client.ZipCode = form.zipCode.value;\n      client.Street = form.street.value;\n      isEditForm ? updateClient() : addClient();\n    }\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form;\n    const validEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-]+\\.[a-zA-Z]{2,6}$/;\n    const noValueEmail = /^[x]{1,}@[x]{1,}.[x]{1,}$/;\n    const noValue = \"no value\"; //MAIL VALIDATOR\n\n    if (!validEmail.test(form.email.value) || noValueEmail.test(form.email.value)) {\n      const errorMsg = \"enter a valid mail\";\n      const newField = {\n        value: form.email.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          email: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.email.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          email: newField\n        }\n      };\n    } // CLIENT_NAME VALIDATOR\n\n\n    const CName = Clients.map(C => C.Company_Name);\n    var name = form.companyName.value;\n    var nameExist = false;\n    const stringRegex = /^[A-Za-zéèàù ]+$/;\n    const numberRegex = /^[0-9 ]+$/; //si dans le formulaire d'ajout\n\n    if (!isEditForm) {\n      for (let test of CName) {\n        if (name.toUpperCase() === test.toUpperCase()) {\n          nameExist = true;\n          break;\n        }\n      }\n    } // si dans le formulaire d edition et que la valeur du champ est différente du nom actuel du client\n\n\n    if (isEditForm && name.toUpperCase() !== client.Company_Name.toUpperCase()) {\n      for (let test of CName) {\n        if (name.toUpperCase() === test.toUpperCase()) {\n          nameExist = true;\n          break;\n        }\n      }\n    }\n\n    if (nameExist === true || name === \"\" || name === noValue) {\n      const errorMsg = \"that name exists or is not valid\";\n      const newField = {\n        value: form.companyName.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          companyName: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.companyName.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          companyName: newField\n        }\n      };\n    } // PHONE NUMBER VALIDATOR\n\n\n    const phoneNumber = form.number.value;\n    const validPhone = /^[0-9 ]+$/;\n\n    if (!validPhone.test(form.number.value) || phoneNumber === noValue || phoneNumber === \"\") {\n      const errorMsg = \"enter valid phone number\";\n      const newField = {\n        value: form.number.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          number: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.number.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          number: newField\n        }\n      };\n    } // LANGUAGE VALIDATOR\n\n\n    const language = form.language.value;\n\n    if (!stringRegex.test(language) || language === noValue || language === \"\") {\n      const errorMsg = \"enter valid language\";\n      const newField = {\n        value: form.language.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          language: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.language.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          language: newField\n        }\n      };\n    } // CITY VALIDATOR\n\n\n    const city = form.city.value;\n\n    if (!stringRegex.test(city) || city === noValue || city === \"\") {\n      const errorMsg = \"enter valid city\";\n      const newField = {\n        value: form.city.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          city: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.city.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          city: newField\n        }\n      };\n    } // ZIP CODE VALIDATOR\n\n\n    const zipCode = form.zipCode.value;\n\n    if (!numberRegex.test(zipCode) || zipCode === noValue || zipCode === \"\") {\n      const errorMsg = \"enter valid zip code\";\n      const newField = {\n        value: form.zipCode.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          zipCode: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.zipCode.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          zipCode: newField\n        }\n      };\n    } // STREET VALIDATOR\n\n\n    const street = form.street.value;\n\n    if (!stringRegex.test(street) || street === noValue || street === \"\") {\n      const errorMsg = \"enter valid street\";\n      const newField = {\n        value: form.street.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          street: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.street.value,\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          street: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.email.isValid && newForm.companyName.isValid && newForm.language.isValid && newForm.number.isValid && newForm.city.isValid && newForm.zipCode.isValid && newForm.street.isValid === true ? true : false;\n  };\n\n  return React.createElement(\"form\", {\n    className: \"container\",\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, isEditForm ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"center\",\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Edit \", client.Company_Name, React.createElement(\"span\", {\n    className: \"btn-floating right waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons grey\",\n    onClick: deleteClient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"delete\")))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"center\",\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"Add client\")))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, form.companyName.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"companyName\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Company name : \", form.companyName.error) : React.createElement(\"label\", {\n    htmlFor: \"companyName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"Company name\"), React.createElement(\"input\", {\n    id: \"companyName\",\n    name: \"companyName\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.companyName.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, form.email.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"email\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, \"E-mail : \", form.email.error) : React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, \"E-mail\"), React.createElement(\"input\", {\n    id: \"email\",\n    name: \"email\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.email.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, form.number.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"number\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"Phone number: \", form.number.error) : React.createElement(\"label\", {\n    htmlFor: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"Phone number\"), React.createElement(\"input\", {\n    id: \"number\",\n    name: \"number\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.number.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, form.language.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"language\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"language: \", form.language.error) : React.createElement(\"label\", {\n    htmlFor: \"language\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"language\"), React.createElement(\"input\", {\n    id: \"language\",\n    name: \"language\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.language.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, \"Address\"), form.city.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"city\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"city: \", form.city.error) : React.createElement(\"label\", {\n    htmlFor: \"city\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"city\"), React.createElement(\"input\", {\n    id: \"city\",\n    name: \"city\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.city.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }), form.zipCode.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"zipCode\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"zip code: \", form.zipCode.error) : React.createElement(\"label\", {\n    htmlFor: \"zipCode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"zip code\"), React.createElement(\"input\", {\n    id: \"zipCode\",\n    name: \"zipCode\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.zipCode.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), form.street.isValid === false ? React.createElement(\"label\", {\n    htmlFor: \"street\",\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"street: \", form.street.error) : React.createElement(\"label\", {\n    htmlFor: \"street\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"street\"), React.createElement(\"input\", {\n    id: \"street\",\n    name: \"street\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.street.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn grey darken-3 waves-effect waves-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nexport default ClientForm;","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/component/client-form.tsx"],"names":["React","useState","useHistory","ClientService","useClients","ProjectService","ClientForm","client","isEditForm","form","setForm","companyName","value","Company_Name","email","Email","language","Language","number","Number","city","City","street","Street","zipCode","ZipCode","history","Clients","updateClient","then","push","ClientId","addClient","deleteClient","Projects","map","P","deleteProject","handleSubmit","e","preventDefault","isFormValid","validateForm","handleInputChange","fieldName","target","name","fieldValue","newField","newForm","validEmail","noValueEmail","noValue","test","errorMsg","error","isValid","CName","C","nameExist","stringRegex","numberRegex","toUpperCase","phoneNumber","validPhone","color"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAAOC,UAAP,QAAwB,kBAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,mBAAP;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;AA0BA,MAAMC,UAAoC,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAD,KAA0B;AAEnE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAO;AACnCU,IAAAA,WAAW,EAAE;AAACC,MAAAA,KAAK,EAAEL,MAAM,CAACM;AAAf,KADsB;AAEnCC,IAAAA,KAAK,EAAE;AAACF,MAAAA,KAAK,EAAEL,MAAM,CAACQ;AAAf,KAF4B;AAGnCC,IAAAA,QAAQ,EAAE;AAACJ,MAAAA,KAAK,EAAEL,MAAM,CAACU;AAAf,KAHyB;AAInCC,IAAAA,MAAM,EAAE;AAACN,MAAAA,KAAK,EAAEL,MAAM,CAACY;AAAf,KAJ2B;AAKnCC,IAAAA,IAAI,EAAE;AAACR,MAAAA,KAAK,EAAEL,MAAM,CAACc;AAAf,KAL6B;AAMnCC,IAAAA,MAAM,EAAE;AAACV,MAAAA,KAAK,EAAEL,MAAM,CAACgB;AAAf,KAN2B;AAOnCC,IAAAA,OAAO,EAAE;AAACZ,MAAAA,KAAK,EAAEL,MAAM,CAACkB;AAAf;AAP0B,GAAP,CAAhC;AASA,QAAMC,OAAO,GAAGxB,UAAU,EAA1B;AACA,QAAMyB,OAAO,GAAGvB,UAAU,EAA1B;;AAEA,QAAMwB,YAAY,GAAG,MAAM;AACvBzB,IAAAA,aAAa,CAACyB,YAAd,CAA2BrB,MAA3B,EACCsB,IADD,CACM,MAAMH,OAAO,CAACI,IAAR,CAAc,WAAUvB,MAAM,CAACwB,QAAS,EAAxC,CADZ;AAEH,GAHD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACpB7B,IAAAA,aAAa,CAAC6B,SAAd,CAAwBzB,MAAxB,EACCsB,IADD,CACM,MAAMH,OAAO,CAACI,IAAR,CAAc,SAAd,CADZ;AAEH,GAHD;;AAKA,QAAMG,YAAY,GAAG,MAAO;AAExB1B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBC,GAAhB,CAAqBC,CAAD,IAChB/B,cAAc,CAACgC,aAAf,CAA6BD,CAA7B,CADJ;AAIAjC,IAAAA,aAAa,CAAC8B,YAAd,CAA2B1B,MAA3B,EACCsB,IADD,CACM,MAAMH,OAAO,CAACI,IAAR,CAAc,SAAd,CADZ;AAED,GARH;;AAUA,QAAMQ,YAAY,GAAIC,CAAD,IAAwC;AACzDA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,WAAW,GAAGC,YAAY,EAAhC;;AAEA,QAAGD,WAAW,KAAK,IAAnB,EAAwB;AACpBlC,MAAAA,MAAM,CAACM,YAAP,GAAsBJ,IAAI,CAACE,WAAL,CAAiBC,KAAvC;AACAL,MAAAA,MAAM,CAACQ,KAAP,GAAeN,IAAI,CAACK,KAAL,CAAWF,KAA1B;AACAL,MAAAA,MAAM,CAACU,QAAP,GAAkBR,IAAI,CAACO,QAAL,CAAcJ,KAAhC;AACAL,MAAAA,MAAM,CAACY,MAAP,GAAgBV,IAAI,CAACS,MAAL,CAAYN,KAA5B;AACAL,MAAAA,MAAM,CAACc,IAAP,GAAcZ,IAAI,CAACW,IAAL,CAAUR,KAAxB;AACAL,MAAAA,MAAM,CAACkB,OAAP,GAAiBhB,IAAI,CAACe,OAAL,CAAaZ,KAA9B;AACAL,MAAAA,MAAM,CAACgB,MAAP,GAAgBd,IAAI,CAACa,MAAL,CAAYV,KAA5B;AAEDJ,MAAAA,UAAU,GAACoB,YAAY,EAAb,GAAgBI,SAAS,EAAnC;AACF;AAEJ,GAjBD;;AAmBA,QAAMW,iBAAiB,GAAIJ,CAAD,IAA6C;AAEnE,UAAMK,SAAiB,GAAGL,CAAC,CAACM,MAAF,CAASC,IAAnC;AACA,UAAMC,UAAkB,GAAGR,CAAC,CAACM,MAAF,CAASjC,KAApC;AAEA,UAAMoC,QAAe,GAAG;AAAC,OAACJ,SAAD,GAAc;AAAChC,QAAAA,KAAK,EAAEmC;AAAR;AAAf,KAAxB;AACArC,IAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,SAAGuC;AAAb,KAAD,CAAP;AACH,GAPD;;AASA,QAAMN,YAAY,GAAG,MAAM;AAEvB,QAAIO,OAAa,GAAGxC,IAApB;AACA,UAAMyC,UAAkB,GAAG,2CAA3B;AACA,UAAMC,YAAoB,GAAG,2BAA7B;AACA,UAAMC,OAAe,GAAG,UAAxB,CALuB,CAOvB;;AACD,QAAG,CAACF,UAAU,CAACG,IAAX,CAAgB5C,IAAI,CAACK,KAAL,CAAWF,KAA3B,CAAD,IAAsCuC,YAAY,CAACE,IAAb,CAAkB5C,IAAI,CAACK,KAAL,CAAWF,KAA7B,CAAzC,EAA6E;AACzE,YAAM0C,QAAe,GAAG,oBAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACK,KAAL,CAAWF,KAAnB;AAA0B2C,QAAAA,KAAK,EAAED,QAAjC;AAA2CE,QAAAA,OAAO,EAAE;AAApD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACnC,UAAAA,KAAK,EAAEkC;AAAR;AAAhB,OAAV;AACH,KAJD,MAKI;AACH,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACK,KAAL,CAAWF,KAAnB;AAA0B4C,QAAAA,OAAO,EAAE;AAAnC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACnC,UAAAA,KAAK,EAAEkC;AAAR;AAAhB,OAAV;AACA,KAhBuB,CAkBxB;;;AAEC,UAAMS,KAAK,GAAG9B,OAAO,CAACQ,GAAR,CAAYuB,CAAC,IAAIA,CAAC,CAAC7C,YAAnB,CAAd;AAEA,QAAIiC,IAAW,GAAKrC,IAAI,CAACE,WAAL,CAAiBC,KAArC;AACA,QAAI+C,SAAiB,GAAG,KAAxB;AACA,UAAMC,WAAmB,GAAG,kBAA5B;AACA,UAAMC,WAAmB,GAAG,WAA5B,CAzBuB,CA2BvB;;AACA,QAAG,CAACrD,UAAJ,EAAe;AACX,WAAI,IAAI6C,IAAR,IAAgBI,KAAhB,EAAsB;AAClB,YAAIX,IAAI,CAACgB,WAAL,OAAuBT,IAAI,CAACS,WAAL,EAA3B,EAA+C;AAC3CH,UAAAA,SAAS,GAAG,IAAZ;AACA;AACH;AACJ;AACJ,KAnCsB,CAoCvB;;;AACA,QAAGnD,UAAU,IAAIsC,IAAI,CAACgB,WAAL,OAAuBvD,MAAM,CAACM,YAAP,CAAoBiD,WAApB,EAAxC,EAA0E;AACtE,WAAI,IAAIT,IAAR,IAAgBI,KAAhB,EAAsB;AAClB,YAAIX,IAAI,CAACgB,WAAL,OAAuBT,IAAI,CAACS,WAAL,EAA3B,EAA+C;AAC3CH,UAAAA,SAAS,GAAG,IAAZ;AACA;AACH;AACJ;AACJ;;AAEG,QAAGA,SAAS,KAAK,IAAd,IAAsBb,IAAI,KAAK,EAA/B,IAAqCA,IAAI,KAAKM,OAAjD,EAAyD;AACrD,YAAME,QAAe,GAAG,kCAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACE,WAAL,CAAiBC,KAAzB;AAAgC2C,QAAAA,KAAK,EAAED,QAAvC;AAAiDE,QAAAA,OAAO,EAAE;AAA1D,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACtC,UAAAA,WAAW,EAAEqC;AAAd;AAAhB,OAAV;AACH,KAJD,MAKI;AACA,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACE,WAAL,CAAiBC,KAAzB;AAAgC4C,QAAAA,OAAO,EAAE;AAAzC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACtC,UAAAA,WAAW,EAAEqC;AAAd;AAAhB,OAAV;AACH,KAtDkB,CAwDvB;;;AACA,UAAMe,WAAmB,GAAGtD,IAAI,CAACS,MAAL,CAAYN,KAAxC;AACA,UAAMoD,UAAkB,GAAG,WAA3B;;AACA,QAAG,CAACA,UAAU,CAACX,IAAX,CAAgB5C,IAAI,CAACS,MAAL,CAAYN,KAA5B,CAAD,IAAuCmD,WAAW,KAAKX,OAAvD,IAAkEW,WAAW,KAAK,EAArF,EAAwF;AACpF,YAAMT,QAAe,GAAG,0BAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACS,MAAL,CAAYN,KAApB;AAA2B2C,QAAAA,KAAK,EAAED,QAAlC;AAA4CE,QAAAA,OAAO,EAAE;AAArD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC/B,UAAAA,MAAM,EAAE8B;AAAT;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACS,MAAL,CAAYN,KAApB;AAA2B4C,QAAAA,OAAO,EAAE;AAApC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC/B,UAAAA,MAAM,EAAE8B;AAAT;AAAhB,OAAV;AACH,KAlEsB,CAoEvB;;;AACA,UAAMhC,QAAgB,GAAGP,IAAI,CAACO,QAAL,CAAcJ,KAAvC;;AACA,QAAG,CAACgD,WAAW,CAACP,IAAZ,CAAiBrC,QAAjB,CAAD,IAA8BA,QAAQ,KAAKoC,OAA3C,IAAsDpC,QAAQ,KAAK,EAAtE,EAAyE;AACrE,YAAMsC,QAAe,GAAG,sBAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACO,QAAL,CAAcJ,KAAtB;AAA6B2C,QAAAA,KAAK,EAAED,QAApC;AAA8CE,QAAAA,OAAO,EAAE;AAAvD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACjC,UAAAA,QAAQ,EAAEgC;AAAX;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACO,QAAL,CAAcJ,KAAtB;AAA6B4C,QAAAA,OAAO,EAAE;AAAtC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACjC,UAAAA,QAAQ,EAAEgC;AAAX;AAAhB,OAAV;AACH,KA7EsB,CA+EvB;;;AACA,UAAM5B,IAAY,GAAGX,IAAI,CAACW,IAAL,CAAUR,KAA/B;;AACA,QAAG,CAACgD,WAAW,CAACP,IAAZ,CAAiBjC,IAAjB,CAAD,IAA2BA,IAAI,KAAKgC,OAApC,IAA+ChC,IAAI,KAAK,EAA3D,EAA8D;AAC1D,YAAMkC,QAAe,GAAG,kBAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACW,IAAL,CAAUR,KAAlB;AAAyB2C,QAAAA,KAAK,EAAED,QAAhC;AAA0CE,QAAAA,OAAO,EAAE;AAAnD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC7B,UAAAA,IAAI,EAAE4B;AAAP;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACW,IAAL,CAAUR,KAAlB;AAAyB4C,QAAAA,OAAO,EAAE;AAAlC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC7B,UAAAA,IAAI,EAAE4B;AAAP;AAAhB,OAAV;AACH,KAxFsB,CA0FvB;;;AACA,UAAMxB,OAAe,GAAGf,IAAI,CAACe,OAAL,CAAaZ,KAArC;;AACA,QAAG,CAACiD,WAAW,CAACR,IAAZ,CAAiB7B,OAAjB,CAAD,IAA8BA,OAAO,KAAK4B,OAA1C,IAAqD5B,OAAO,KAAK,EAApE,EAAuE;AACnE,YAAM8B,QAAe,GAAG,sBAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACe,OAAL,CAAaZ,KAArB;AAA4B2C,QAAAA,KAAK,EAAED,QAAnC;AAA6CE,QAAAA,OAAO,EAAE;AAAtD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACzB,UAAAA,OAAO,EAAEwB;AAAV;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACe,OAAL,CAAaZ,KAArB;AAA4B4C,QAAAA,OAAO,EAAE;AAArC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAACzB,UAAAA,OAAO,EAAEwB;AAAV;AAAhB,OAAV;AACH,KAnGsB,CAqGvB;;;AACA,UAAM1B,MAAc,GAAGb,IAAI,CAACa,MAAL,CAAYV,KAAnC;;AACA,QAAG,CAACgD,WAAW,CAACP,IAAZ,CAAiB/B,MAAjB,CAAD,IAA6BA,MAAM,KAAK8B,OAAxC,IAAmD9B,MAAM,KAAK,EAAjE,EAAoE;AAChE,YAAMgC,QAAe,GAAG,oBAAxB;AACA,YAAMN,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACa,MAAL,CAAYV,KAApB;AAA2B2C,QAAAA,KAAK,EAAED,QAAlC;AAA4CE,QAAAA,OAAO,EAAE;AAArD,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC3B,UAAAA,MAAM,EAAE0B;AAAT;AAAhB,OAAV;AACH,KAJD,MAIK;AACD,YAAMA,QAAe,GAAG;AAACpC,QAAAA,KAAK,EAAEH,IAAI,CAACa,MAAL,CAAYV,KAApB;AAA2B4C,QAAAA,OAAO,EAAE;AAApC,OAAxB;AACAP,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa,WAAG;AAAC3B,UAAAA,MAAM,EAAE0B;AAAT;AAAhB,OAAV;AACH;;AAEFtC,IAAAA,OAAO,CAACuC,OAAD,CAAP;AAEA,WACKA,OAAO,CAACnC,KAAR,CAAc0C,OAAd,IACAP,OAAO,CAACtC,WAAR,CAAoB6C,OADpB,IAEAP,OAAO,CAACjC,QAAR,CAAiBwC,OAFjB,IAGAP,OAAO,CAAC/B,MAAR,CAAesC,OAHf,IAIAP,OAAO,CAAC7B,IAAR,CAAaoC,OAJb,IAKAP,OAAO,CAACzB,OAAR,CAAgBgC,OALhB,IAMAP,OAAO,CAAC3B,MAAR,CAAekC,OAAf,KAA2B,IAPzB,GAO+B,IAP/B,GAOoC,KAP3C;AAQF,GA1HD;;AA8HA,SACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,QAAQ,EAAEjB,CAAC,IAAID,YAAY,CAACC,CAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACS/B,UAAU,GACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACyD,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAsD1D,MAAM,CAACM,YAA7D,EACI;AAAM,IAAA,SAAS,EAAC,6CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,qBAAb;AAAmC,IAAA,OAAO,EAAEoB,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,CADJ,CADO,GAUP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACgC,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAXZ,CADJ,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEaxD,IAAI,CAACE,WAAL,CAAiB6C,OAAjB,KAA6B,KAA9B,GACA;AAAO,IAAA,OAAO,EAAC,aAAf;AAA6B,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoExD,IAAI,CAACE,WAAL,CAAiB4C,KAArF,CADA,GACqG;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHjH,EAKQ;AAAO,IAAA,EAAE,EAAC,aAAV;AAAwB,IAAA,IAAI,EAAC,aAA7B;AAA2C,IAAA,IAAI,EAAC,MAAhD;AAAuD,IAAA,SAAS,EAAC,cAAjE;AAAgF,IAAA,KAAK,EAAE9C,IAAI,CAACE,WAAL,CAAiBC,KAAxG;AAA+G,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAA/I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CAtBJ,EA+BI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEa9B,IAAI,CAACK,KAAL,CAAW0C,OAAX,KAAuB,KAAxB,GACA;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwDxD,IAAI,CAACK,KAAL,CAAWyC,KAAnE,CADA,GACmF;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAH/F,EAKQ;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,IAAI,EAAC,OAAvB;AAA+B,IAAA,IAAI,EAAC,MAApC;AAA2C,IAAA,SAAS,EAAC,cAArD;AAAoE,IAAA,KAAK,EAAE9C,IAAI,CAACK,KAAL,CAAWF,KAAtF;AAA6F,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CA/BJ,EAyCI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK9B,IAAI,CAACS,MAAL,CAAYsC,OAAZ,KAAwB,KAAxB,GAA8B;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA8DxD,IAAI,CAACS,MAAL,CAAYqC,KAA1E,CAA9B,GAAuH;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAD5H,EAGI;AAAO,IAAA,EAAE,EAAC,QAAV;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,IAAI,EAAC,MAAtC;AAA6C,IAAA,SAAS,EAAC,cAAvD;AAAsE,IAAA,KAAK,EAAE9C,IAAI,CAACS,MAAL,CAAYN,KAAzF;AAAgG,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAzCJ,EAgDI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK9B,IAAI,CAACO,QAAL,CAAcwC,OAAd,KAA0B,KAA1B,GAAiC;AAAO,IAAA,OAAO,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4DxD,IAAI,CAACO,QAAL,CAAcuC,KAA1E,CAAjC,GAA4H;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADjI,EAGQ;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,IAAI,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAC,MAA1C;AAAiD,IAAA,SAAS,EAAC,cAA3D;AAA0E,IAAA,KAAK,EAAE9C,IAAI,CAACO,QAAL,CAAcJ,KAA/F;AAAsG,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAAtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,CAhDJ,EAuDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvDJ,EAwDI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAGK9B,IAAI,CAACW,IAAL,CAAUoC,OAAV,KAAsB,KAAtB,GAA6B;AAAO,IAAA,OAAO,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAoDxD,IAAI,CAACW,IAAL,CAAUmC,KAA9D,CAA7B,GAA4G;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHjH,EAIQ;AAAO,IAAA,EAAE,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,IAAI,EAAC,MAAlC;AAAyC,IAAA,SAAS,EAAC,cAAnD;AAAkE,IAAA,KAAK,EAAE9C,IAAI,CAACW,IAAL,CAAUR,KAAnF;AAA0F,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,EAMK9B,IAAI,CAACe,OAAL,CAAagC,OAAb,KAAyB,KAAzB,GAAgC;AAAO,IAAA,OAAO,EAAC,SAAf;AAAyB,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2DxD,IAAI,CAACe,OAAL,CAAa+B,KAAxE,CAAhC,GAAyH;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAN9H,EAOQ;AAAO,IAAA,EAAE,EAAC,SAAV;AAAoB,IAAA,IAAI,EAAC,SAAzB;AAAmC,IAAA,IAAI,EAAC,MAAxC;AAA+C,IAAA,SAAS,EAAC,cAAzD;AAAwE,IAAA,KAAK,EAAE9C,IAAI,CAACe,OAAL,CAAaZ,KAA5F;AAAmG,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAAnI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPR,EASK9B,IAAI,CAACa,MAAL,CAAYkC,OAAZ,KAAwB,KAAxB,GAA+B;AAAO,IAAA,OAAO,EAAC,QAAf;AAAyB,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE;AAAR,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAyDxD,IAAI,CAACa,MAAL,CAAYiC,KAArE,CAA/B,GAAsH;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAT3H,EAUQ;AAAO,IAAA,EAAE,EAAC,QAAV;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,IAAI,EAAC,MAAtC;AAA6C,IAAA,SAAS,EAAC,cAAvD;AAAsE,IAAA,KAAK,EAAE9C,IAAI,CAACa,MAAL,CAAYV,KAAzF;AAAgG,IAAA,QAAQ,EAAE2B,CAAC,IAAII,iBAAiB,CAACJ,CAAD,CAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVR,CAxDJ,EAqEI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,4CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArEJ,CADJ;AA2EH,CAtQD;;AAwQA,eAAejC,UAAf","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport Client from '../models/client';\r\nimport{useHistory} from 'react-router-dom';\r\nimport ClientService from '../services/client-services';\r\nimport { useClients } from '../hooks/clients-hook';\r\nimport '../pages/form.css';\r\nimport ProjectService from '../services/project-service';\r\n\r\ntype Props = {\r\n    client: Client,\r\n    isEditForm: Boolean\r\n}\r\n\r\ntype Field = {\r\n    value?: any, \r\n    error?:string, \r\n    isValid?: boolean\r\n  }\r\n\r\n  type Form = {\r\n    companyName: Field,\r\n    street: Field,\r\n    zipCode: Field,\r\n    city: Field, \r\n    email: Field,\r\n    language: Field,\r\n    number: Field,\r\n    //Projects: Field \r\n}\r\n\r\n\r\n\r\nconst ClientForm: FunctionComponent<Props> = ({client, isEditForm}) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        companyName: {value: client.Company_Name}, \r\n        email: {value: client.Email},\r\n        language: {value: client.Language},\r\n        number: {value: client.Number},\r\n        city: {value: client.City},\r\n        street: {value: client.Street},\r\n        zipCode: {value: client.ZipCode}\r\n    });\r\n    const history = useHistory();\r\n    const Clients = useClients();\r\n   \r\n    const updateClient = () => {\r\n        ClientService.updateClient(client)\r\n        .then(() => history.push(`/client/${client.ClientId}`));\r\n    }\r\n    const addClient = () => {\r\n        ClientService.addClient(client)\r\n        .then(() => history.push(`/client`));\r\n    }\r\n\r\n    const deleteClient = () =>  {\r\n        \r\n        client.Projects.map((P) => \r\n            ProjectService.deleteProject(P)\r\n        );\r\n\r\n        ClientService.deleteClient(client)\r\n        .then(() => history.push(`/client`));\r\n      }\r\n   \r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault();\r\n\r\n        const isFormValid = validateForm();\r\n\r\n        if(isFormValid === true){\r\n            client.Company_Name = form.companyName.value;\r\n            client.Email = form.email.value;\r\n            client.Language = form.language.value;\r\n            client.Number = form.number.value;\r\n            client.City = form.city.value;\r\n            client.ZipCode = form.zipCode.value;\r\n            client.Street = form.street.value;\r\n\r\n           isEditForm?updateClient():addClient();\r\n        }\r\n      \r\n    }\r\n\r\n    const handleInputChange = (e : React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n\r\n        const newField: Field = {[fieldName] : {value: fieldValue}};\r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n    const validateForm = () => {\r\n      \r\n        let newForm: Form = form;\r\n        const validEmail: RegExp = /^[a-zA-Z-0-9]+@[a-zA-Z-]+\\.[a-zA-Z]{2,6}$/ ;\r\n        const noValueEmail: RegExp = /^[x]{1,}@[x]{1,}.[x]{1,}$/ ;\r\n        const noValue: string = \"no value\";\r\n\r\n        //MAIL VALIDATOR\r\n       if(!validEmail.test(form.email.value) || noValueEmail.test(form.email.value)){\r\n           const errorMsg:string = \"enter a valid mail\";\r\n           const newField: Field = {value: form.email.value, error: errorMsg, isValid: false};\r\n           newForm = {...newForm, ...{email: newField}};\r\n       }\r\n       else{\r\n        const newField: Field = {value: form.email.value, isValid: true};\r\n        newForm = {...newForm, ...{email: newField}};\r\n       }\r\n\r\n       // CLIENT_NAME VALIDATOR\r\n       \r\n        const CName = Clients.map(C => C.Company_Name);\r\n       \r\n        var name:string  =  form.companyName.value;\r\n        var nameExist:boolean = false;\r\n        const stringRegex: RegExp = /^[A-Za-zéèàù ]+$/;\r\n        const numberRegex: RegExp = /^[0-9 ]+$/;\r\n\r\n        //si dans le formulaire d'ajout\r\n        if(!isEditForm){\r\n            for(let test of CName){\r\n                if((name.toUpperCase() === test.toUpperCase())){\r\n                    nameExist = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // si dans le formulaire d edition et que la valeur du champ est différente du nom actuel du client\r\n        if(isEditForm && name.toUpperCase() !== client.Company_Name.toUpperCase()){\r\n            for(let test of CName){\r\n                if((name.toUpperCase() === test.toUpperCase())){\r\n                    nameExist = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n            if(nameExist === true || name === \"\" || name === noValue){\r\n                const errorMsg:string = \"that name exists or is not valid\";\r\n                const newField: Field = {value: form.companyName.value, error: errorMsg, isValid: false};\r\n                newForm = {...newForm, ...{companyName: newField}};\r\n            }\r\n            else{\r\n                const newField: Field = {value: form.companyName.value, isValid: true};\r\n                newForm = {...newForm, ...{companyName: newField}};\r\n            }\r\n\r\n        // PHONE NUMBER VALIDATOR\r\n        const phoneNumber: string = form.number.value;\r\n        const validPhone: RegExp = /^[0-9 ]+$/;\r\n        if(!validPhone.test(form.number.value) || phoneNumber === noValue || phoneNumber === \"\"){\r\n            const errorMsg:string = \"enter valid phone number\";\r\n            const newField: Field = {value: form.number.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{number: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.number.value, isValid: true};\r\n            newForm = {...newForm, ...{number: newField}};\r\n        }\r\n\r\n        // LANGUAGE VALIDATOR\r\n        const language: string = form.language.value;\r\n        if(!stringRegex.test(language) ||language === noValue || language === \"\"){\r\n            const errorMsg:string = \"enter valid language\";\r\n            const newField: Field = {value: form.language.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{language: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.language.value, isValid: true};\r\n            newForm = {...newForm, ...{language: newField}};\r\n        }\r\n\r\n        // CITY VALIDATOR\r\n        const city: string = form.city.value;\r\n        if(!stringRegex.test(city) || city === noValue || city === \"\"){\r\n            const errorMsg:string = \"enter valid city\";\r\n            const newField: Field = {value: form.city.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{city: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.city.value, isValid: true};\r\n            newForm = {...newForm, ...{city: newField}};\r\n        }\r\n\r\n        // ZIP CODE VALIDATOR\r\n        const zipCode: string = form.zipCode.value;\r\n        if(!numberRegex.test(zipCode) || zipCode === noValue || zipCode === \"\"){\r\n            const errorMsg:string = \"enter valid zip code\";\r\n            const newField: Field = {value: form.zipCode.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{zipCode: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.zipCode.value, isValid: true};\r\n            newForm = {...newForm, ...{zipCode: newField}};\r\n        }\r\n\r\n        // STREET VALIDATOR\r\n        const street: string = form.street.value;\r\n        if(!stringRegex.test(street) || street === noValue || street === \"\"){\r\n            const errorMsg:string = \"enter valid street\";\r\n            const newField: Field = {value: form.street.value, error: errorMsg, isValid: false};\r\n            newForm = {...newForm, ...{street: newField}};\r\n        }else{\r\n            const newField: Field = {value: form.street.value, isValid: true};\r\n            newForm = {...newForm, ...{street: newField}};\r\n        }\r\n\r\n       setForm(newForm);\r\n\r\n       return (\r\n            newForm.email.isValid &&\r\n            newForm.companyName.isValid && \r\n            newForm.language.isValid &&\r\n            newForm.number.isValid && \r\n            newForm.city.isValid &&\r\n            newForm.zipCode.isValid &&\r\n            newForm.street.isValid === true)?true:false;\r\n    }\r\n\r\n   \r\n\r\n    return(\r\n        <form className=\"container\" onSubmit={e => handleSubmit(e)}>\r\n            <div>\r\n                <div>\r\n                        {isEditForm? (\r\n                            <div>\r\n                                <h3 className=\"center\" style={{color: 'black'}}>Edit {client.Company_Name}\r\n                                    <span className=\"btn-floating right waves-effect waves-light\">\r\n                                        <i className=\"material-icons grey\" onClick={deleteClient}>delete</i>\r\n                                    </span>\r\n                                </h3>\r\n                                \r\n                            </div>\r\n                        ):(\r\n                            <div>\r\n                                <h3 className=\"center\" style={{color: 'black'}}>Add client</h3>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n\r\n            </div>\r\n            \r\n           {/*Company Name*/}\r\n            <div className=\"form-group\">\r\n                    {\r\n                        (form.companyName.isValid === false)?\r\n                        <label htmlFor=\"companyName\" style={{color: 'red'}}>Company name : {form.companyName.error}</label>: <label htmlFor=\"companyName\" >Company name</label>\r\n                    }\r\n                    <input id=\"companyName\" name=\"companyName\" type=\"text\" className=\"form-control\" value={form.companyName.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n            \r\n            {/*Email*/}\r\n            <div className=\"form-group\">\r\n                    {\r\n                        (form.email.isValid === false)?\r\n                        <label htmlFor=\"email\" style={{color: 'red'}}>E-mail : {form.email.error}</label>: <label htmlFor=\"email\">E-mail</label>\r\n                    }\r\n                    <input id=\"email\" name=\"email\" type=\"text\" className=\"form-control\" value={form.email.value} onChange={e => handleInputChange(e)}></input>        \r\n                   \r\n            </div>\r\n            \r\n            {/*Phone Number*/}\r\n            <div className=\"form-group\">\r\n                {form.number.isValid === false?<label htmlFor=\"number\" style={{color: 'red'}}>Phone number: {form.number.error}</label>:<label htmlFor=\"number\">Phone number</label> }                   \r\n                    \r\n                <input id=\"number\" name=\"number\" type=\"text\" className=\"form-control\" value={form.number.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            {/*Language*/}\r\n            <div className=\"form-group\">\r\n                {form.language.isValid === false? <label htmlFor=\"language\" style={{color: 'red'}}>language: {form.language.error}</label> : <label htmlFor=\"language\">language</label> }\r\n                    \r\n                    <input id=\"language\" name=\"language\" type=\"text\" className=\"form-control\" value={form.language.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n            \r\n            {/*Address*/}\r\n            <br/>\r\n            <div className=\"form-group\">\r\n\r\n                <h6>Address</h6>\r\n                {form.city.isValid === false? <label htmlFor=\"city\" style={{color: 'red'}}>city: {form.city.error}</label> : <label htmlFor=\"city\">city</label>}     \r\n                    <input id=\"city\" name=\"city\" type=\"text\" className=\"form-control\" value={form.city.value} onChange={e => handleInputChange(e)}></input> \r\n              \r\n                {form.zipCode.isValid === false? <label htmlFor=\"zipCode\" style={{color: 'red'}}>zip code: {form.zipCode.error}</label> : <label htmlFor=\"zipCode\">zip code</label>}    \r\n                    <input id=\"zipCode\" name=\"zipCode\" type=\"text\" className=\"form-control\" value={form.zipCode.value} onChange={e => handleInputChange(e)}></input>       \r\n                    \r\n                {form.street.isValid === false? <label htmlFor=\"street\"  style={{color: 'red'}}>street: {form.street.error}</label> :  <label htmlFor=\"street\">street</label>}      \r\n                    <input id=\"street\" name=\"street\" type=\"text\" className=\"form-control\" value={form.street.value} onChange={e => handleInputChange(e)}></input>\r\n            </div>\r\n                            \r\n            <button type=\"submit\" className=\"btn grey darken-3 waves-effect waves-black\">Submit</button>\r\n            \r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nexport default ClientForm;"]},"metadata":{},"sourceType":"module"}