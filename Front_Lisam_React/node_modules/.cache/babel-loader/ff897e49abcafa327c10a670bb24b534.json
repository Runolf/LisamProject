{"ast":null,"code":"export default class ClientService {\n  static getClients() {\n    return fetch('http://localhost:44331/api/Client').then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static getClient(id) {\n    return fetch(`http://localhost:44331/api/Client/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static addClient(client) {\n    //delete client.ClientId;\n    // delete client.Projects;\n    return fetch(`http://localhost:44331/api/Client`, {\n      method: 'POST',\n      body: JSON.stringify(client),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static updateClient(client) {\n    return fetch(`http://localhost:44331/api/Client/${client.ClientId}`, {\n      method: 'PUT',\n      body: JSON.stringify(client),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deleteClient(client) {\n    return fetch(`http://localhost:44331/api/Client/${client.ClientId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/services/client-services.ts"],"names":["ClientService","getClients","fetch","then","response","json","catch","error","handleError","getClient","id","method","headers","data","isEmpty","addClient","client","body","JSON","stringify","updateClient","ClientId","deleteClient","Object","keys","length","console"],"mappings":"AAGA,eAAe,MAAMA,aAAN,CAAmB;AAE9B,SAAOC,UAAP,GAAuC;AACnC,WAAOC,KAAK,CAAC,mCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJC,KAFI,CAEEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAFX,CAAP;AAGD;;AAEH,SAAOE,SAAP,CAAiBC,EAAjB,EAAmD;AAC/C,WAAOR,KAAK,CAAE,qCAAoCQ,EAAG,EAAzC,EAA4C;AACtDC,MAAAA,MAAM,EAAE,KAD8C;AAEtDC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAF6C,KAA5C,CAAL,CAIJT,IAJI,CAICC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJb,EAKJF,IALI,CAKCU,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAmB,IAAnB,GAAwBA,IALjC,EAMJP,KANI,CAMEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANX,CAAP;AAOD;;AAEH,SAAOQ,SAAP,CAAiBC,MAAjB,EAAiD;AAE9C;AACD;AAEE,WAAOd,KAAK,CAAE,mCAAF,EAAqC;AACjDS,MAAAA,MAAM,EAAE,MADyC;AAEjDM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAF2C;AAGjDJ,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHwC,KAArC,CAAL,CAKNT,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAGD,SAAOa,YAAP,CAAoBJ,MAApB,EAAoD;AAElD,WAAOd,KAAK,CAAE,qCAAoCc,MAAM,CAACK,QAAS,EAAtD,EAAwD;AACpEV,MAAAA,MAAM,EAAE,KAD4D;AAEpEM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAF8D;AAGpEJ,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAH2D,KAAxD,CAAL,CAKNT,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNC,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAGC,SAAOe,YAAP,CAAoBN,MAApB,EAAgD;AAEhD,WAAOd,KAAK,CAAE,qCAAoCc,MAAM,CAACK,QAAS,EAAtD,EAAwD;AACpEV,MAAAA,MAAM,EAAE,QAD4D;AAEpEC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAF2D,KAAxD,CAAL,CAINT,IAJM,CAIDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJX,EAKNC,KALM,CAKAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CALT,CAAP;AAMH;;AAIG,SAAOO,OAAP,CAAeD,IAAf,EAAsC;AAClC,WAAOU,MAAM,CAACC,IAAP,CAAYX,IAAZ,EAAkBY,MAAlB,KAA6B,CAApC;AACD;;AAEH,SAAOjB,WAAP,CAAmBD,KAAnB,EAAuC;AACnCmB,IAAAA,OAAO,CAACnB,KAAR,CAAcA,KAAd;AACD;;AA/D2B","sourcesContent":["import Client from '../models/client';\r\nimport { METHODS } from 'http';\r\n\r\nexport default class ClientService{\r\n\r\n    static getClients(): Promise<Client[]> {\r\n        return fetch('http://localhost:44331/api/Client')\r\n          .then(response => response.json())\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n    static getClient(id: number): Promise<Client|null> {\r\n        return fetch(`http://localhost:44331/api/Client/${id}`, {\r\n          method: 'GET',\r\n          headers: {'Content-Type': 'application/json'}\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => this.isEmpty(data)?null:data)\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n    static addClient(client: Client): Promise<Client>{\r\n\r\n       //delete client.ClientId;\r\n      // delete client.Projects;\r\n\r\n        return fetch(`http://localhost:44331/api/Client`,{\r\n        method: 'POST',\r\n        body: JSON.stringify(client),\r\n        headers: {'Content-Type': 'application/json'}\r\n      })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n    }\r\n\r\n\r\n    static updateClient(client: Client): Promise<Client>{\r\n\r\n      return fetch(`http://localhost:44331/api/Client/${client.ClientId}`,{\r\n      method: 'PUT',\r\n      body: JSON.stringify(client),\r\n      headers: {'Content-Type': 'application/json'}\r\n    })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  }\r\n\r\n\r\n    static deleteClient(client: Client): Promise<{}>{\r\n\r\n    return fetch(`http://localhost:44331/api/Client/${client.ClientId}`,{\r\n    method: 'DELETE',\r\n    headers: {'Content-Type': 'application/json'}\r\n  })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n}\r\n\r\n\r\n\r\n    static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n      }\r\n\r\n    static handleError(error: Error): void {\r\n        console.error(error);\r\n      }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}