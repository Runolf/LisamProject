{"ast":null,"code":"import Client from '../models/client';\nimport Project from '../models/project';\nexport default class ClientService {\n  static getClients() {\n    return fetch('http://localhost:44331/api/Client').then(response => response.json()).then(CLient => Client.prototype.ProjectId == Project.prototype.ProjectId).catch(error => this.handleError(error));\n  }\n\n  static getClient(id) {\n    return fetch('http://localhost:44331/api/Client').then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n  }\n\n  static addClient(client) {\n    return fetch(`http://localhost:44331/api/Client`, {\n      method: 'POST',\n      body: JSON.stringify(client),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static updateClient(client) {\n    return fetch(`http://localhost:44331/api/Client${client.ClientId}`, {\n      method: 'PUT',\n      body: JSON.stringify(client),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static deleteClient(client) {\n    return fetch(`http://localhost:44331/api/Client${client.ClientId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => this.handleError(error));\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/services/client-services.ts"],"names":["Client","Project","ClientService","getClients","fetch","then","response","json","CLient","prototype","ProjectId","catch","error","handleError","getClient","id","data","isEmpty","addClient","client","method","body","JSON","stringify","headers","updateClient","ClientId","deleteClient","Object","keys","length","console"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,eAAe,MAAMC,aAAN,CAAmB;AAC9B,SAAOC,UAAP,GAAuC;AACnC,WAAOC,KAAK,CAAC,mCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECG,MAAM,IAAIR,MAAM,CAACS,SAAP,CAAiBC,SAAjB,IAA8BT,OAAO,CAACQ,SAAR,CAAkBC,SAF3D,EAGJC,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAED,SAAOE,SAAP,CAAiBC,EAAjB,EAAmD;AACjD,WAAOX,KAAK,CAAC,mCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECW,IAAI,IAAI,KAAKC,OAAL,CAAaD,IAAb,IAAmB,IAAnB,GAAwBA,IAFjC,EAGJL,KAHI,CAGEC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CAHX,CAAP;AAID;;AAEH,SAAOM,SAAP,CAAiBC,MAAjB,EAAiD;AAE7C,WAAOf,KAAK,CAAE,mCAAF,EAAqC;AACjDgB,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAF2C;AAGjDK,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAHwC,KAArC,CAAL,CAKNnB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNI,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAED,SAAOa,YAAP,CAAoBN,MAApB,EAAoD;AAElD,WAAOf,KAAK,CAAE,oCAAmCe,MAAM,CAACO,QAAS,EAArD,EAAuD;AACnEN,MAAAA,MAAM,EAAE,KAD2D;AAEnEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAF6D;AAGnEK,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAH0D,KAAvD,CAAL,CAKNnB,IALM,CAKDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALX,EAMNI,KANM,CAMAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CANT,CAAP;AAOH;;AAED,SAAOe,YAAP,CAAoBR,MAApB,EAAoD;AAElD,WAAOf,KAAK,CAAE,oCAAmCe,MAAM,CAACO,QAAS,EAArD,EAAuD;AACnEN,MAAAA,MAAM,EAAE,QAD2D;AAEnEI,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAF0D,KAAvD,CAAL,CAINnB,IAJM,CAIDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJX,EAKNI,KALM,CAKAC,KAAK,IAAI,KAAKC,WAAL,CAAiBD,KAAjB,CALT,CAAP;AAMH;;AAEK,SAAOK,OAAP,CAAeD,IAAf,EAAsC;AACpC,WAAOY,MAAM,CAACC,IAAP,CAAYb,IAAZ,EAAkBc,MAAlB,KAA6B,CAApC;AACD;;AAED,SAAOjB,WAAP,CAAmBD,KAAnB,EAAuC;AACrCmB,IAAAA,OAAO,CAACnB,KAAR,CAAcA,KAAd;AACD;;AArD2B","sourcesContent":["import Client from '../models/client';\r\nimport Project from '../models/project';\r\n\r\nexport default class ClientService{ \r\n    static getClients(): Promise<Client[]> {\r\n        return fetch('http://localhost:44331/api/Client')\r\n          .then(response => response.json())\r\n          .then(CLient => Client.prototype.ProjectId == Project.prototype.ProjectId)\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n      static getClient(id: number): Promise<Client|null> {\r\n        return fetch('http://localhost:44331/api/Client')\r\n          .then(response => response.json())\r\n          .then(data => this.isEmpty(data)?null:data)\r\n          .catch(error => this.handleError(error));\r\n      }\r\n\r\n    static addClient(client: Client): Promise<Client>{\r\n\r\n        return fetch(`http://localhost:44331/api/Client`,{\r\n        method: 'POST',\r\n        body: JSON.stringify(client),\r\n        headers: {'Content-Type': 'application/json'} \r\n      })\r\n        .then(response => response.json())\r\n        .catch(error => this.handleError(error));\r\n    } \r\n\r\n    static updateClient(client: Client): Promise<Client>{\r\n\r\n      return fetch(`http://localhost:44331/api/Client${client.ClientId}`,{\r\n      method: 'PUT',\r\n      body: JSON.stringify(client),\r\n      headers: {'Content-Type': 'application/json'} \r\n    })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  } \r\n\r\n  static deleteClient(client: Client): Promise<Client>{\r\n\r\n    return fetch(`http://localhost:44331/api/Client${client.ClientId}`,{\r\n    method: 'DELETE',\r\n    headers: {'Content-Type': 'application/json'} \r\n  })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n} \r\n\r\n      static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n      }\r\n    \r\n      static handleError(error: Error): void {\r\n        console.error(error);\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}