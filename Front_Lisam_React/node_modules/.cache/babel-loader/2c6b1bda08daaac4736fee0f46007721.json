{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stagiaire02\\\\source\\\\repos\\\\LisamProject\\\\Front_Lisam_React\\\\src\\\\component\\\\project-form.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ProjectService from '../services/project-service';\nimport { useClients } from '../hooks/clients-hook';\n\nconst ProjectForm = ({\n  project,\n  isEditForm\n}) => {\n  var Clients = useClients();\n\n  const getIdClientByName = name => {\n    var result;\n\n    if (Clients !== null) {\n      result = Clients.filter(client => client.Company_Name === name);\n    } else {\n      result = undefined;\n    }\n\n    var dude = result.shift();\n    if (dude.ClientId !== undefined) return dude.ClientId;\n  };\n\n  var Guys = useClients();\n\n  const getNameClientById = id => {\n    var res;\n\n    if (res !== null) {\n      res = Guys.filter(client => client.ClientId === id);\n    } else {\n      res = undefined;\n    }\n\n    var c = res.shift();\n    if (c.ClientId !== undefined) return c.Company_Name;\n  };\n\n  var ClientId = project.ClientId !== undefined ? getNameClientById(project.ClientId) : project.ClientId;\n  const [form, setForm] = useState({\n    projectLeader: {\n      value: project.ProjectLeader\n    },\n    projectNumber: {\n      value: project.ProjectNumber\n    },\n    signatureDate: {\n      value: project.SignatureDate\n    },\n    statut: {\n      value: project.Statut\n    },\n    client: {\n      value: ClientId\n    }\n  });\n  const history = useHistory();\n\n  const updateProject = () => {\n    ProjectService.updateProject(project).then(() => history.push(`/project/${project.ProjectId}`));\n  };\n\n  const addProject = () => {\n    ProjectService.addProject(project).then(() => history.push(`/project`));\n  };\n\n  const deleteProject = () => {\n    ProjectService.deleteProject(project).then(() => history.push(`/project`));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    project.ProjectLeader = form.projectLeader.value;\n    project.ProjectNumber = form.projectNumber.value;\n    project.SignatureDate = form.signatureDate.value;\n    project.Statut = form.statut.value;\n    project.ClientId = form.client.value;\n    isEditForm ? updateProject() : addProject();\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  return React.createElement(\"form\", {\n    className: \"container\",\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \" \", isEditForm ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Edit\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Adding\")))), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"projectNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"projectNumber\"), React.createElement(\"input\", {\n    id: \"projectNumber\",\n    name: \"projectNumber\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.projectNumber.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"projectLeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"projectLeader\"), React.createElement(\"input\", {\n    id: \"projectLeader\",\n    name: \"projectLeader\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.projectLeader.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"statut\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"statut\"), React.createElement(\"input\", {\n    id: \"statut\",\n    name: \"statut\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.statut.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"signatureDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"signatureDate\"), React.createElement(\"input\", {\n    id: \"signatureDate\",\n    name: \"signatureDate\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.signatureDate.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"Client\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Client\"), React.createElement(\"input\", {\n    id: \"Client\",\n    name: \"Client\",\n    type: \"text\",\n    className: \"form-control\",\n    value: form.client.value,\n    onChange: e => handleInputChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn grey darken-3 waves-effect waves-black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Valider\"), React.createElement(\"span\", {\n    className: \"btn-floating right waves-effect waves-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    onClick: deleteProject,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"delete\")));\n};\n\nexport default ProjectForm;","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/LisamProject/Front_Lisam_React/src/component/project-form.tsx"],"names":["React","useState","useHistory","ProjectService","useClients","ProjectForm","project","isEditForm","Clients","getIdClientByName","name","result","filter","client","Company_Name","undefined","dude","shift","ClientId","Guys","getNameClientById","id","res","c","form","setForm","projectLeader","value","ProjectLeader","projectNumber","ProjectNumber","signatureDate","SignatureDate","statut","Statut","history","updateProject","then","push","ProjectId","addProject","deleteProject","handleSubmit","e","preventDefault","handleInputChange","fieldName","target","fieldValue","newField"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport Project from '../models/project';\r\nimport{useHistory} from 'react-router-dom';\r\nimport ProjectService from '../services/project-service';\r\nimport { useClients } from '../hooks/clients-hook';\r\n\r\ntype Props = {\r\n    project: Project,\r\n    isEditForm: Boolean\r\n}\r\n\r\ntype Field = {\r\n    value?: any, \r\n    error?:string, \r\n    isValid?: boolean\r\n  }\r\n\r\ntype Form = {\r\n    projectNumber: Field,\r\n    projectLeader: Field,\r\n    statut: Field,\r\n    signatureDate: Field,\r\n    client: Field\r\n    /*\r\n     Champ pour ajouter le client -> faire une methode pour l'assigner. \r\n     Idée: faire aussi un bouton pour accéder au formulaire de création de client\r\n     */\r\n}\r\n\r\nconst ProjectForm: FunctionComponent<Props> = ({project, isEditForm}) => {\r\n   \r\n    var Clients = useClients(); \r\n    const getIdClientByName =  (name: string) => {\r\n        var result;\r\n     if(Clients !== null){\r\n       result = Clients.filter(client => client.Company_Name === name);\r\n     }else{\r\n         result = undefined\r\n        }\r\n    \r\n     var dude = result.shift();\r\n     if(dude.ClientId !== undefined)\r\n     return dude.ClientId;\r\n    }\r\n\r\n    var Guys = useClients();\r\n    const getNameClientById =  (id: number) => {\r\n       var res;\r\n       if(res !== null){res =  Guys.filter(client => client.ClientId === id);}\r\n       else{res = undefined}\r\n       \r\n       var c =  res.shift();\r\n       if(c.ClientId !== undefined)\r\n       return c.Company_Name;\r\n    }\r\n\r\n  var ClientId = project.ClientId !== undefined? getNameClientById(project.ClientId):project.ClientId;\r\n    const [form, setForm] = useState<Form>({\r\n        projectLeader: {value: project.ProjectLeader},\r\n        projectNumber: {value: project.ProjectNumber},\r\n        signatureDate: {value: project.SignatureDate},\r\n        statut: {value: project.Statut}, \r\n        client : {value: ClientId }\r\n    });\r\n    const history = useHistory();\r\n\r\n    const updateProject = () => {\r\n        ProjectService.updateProject(project)\r\n        .then(() => history.push(`/project/${project.ProjectId}`));\r\n    }\r\n\r\n    const addProject = () => {\r\n        ProjectService.addProject(project)\r\n        .then(() => history.push(`/project`));\r\n    }\r\n\r\n    const deleteProject = () => {\r\n        ProjectService.deleteProject(project)\r\n        .then(() => history.push(`/project`));\r\n    }\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault();\r\n        project.ProjectLeader = form.projectLeader.value;\r\n        project.ProjectNumber = form.projectNumber.value;\r\n        project.SignatureDate = form.signatureDate.value;\r\n        project.Statut = form.statut.value;\r\n        project.ClientId = form.client.value;\r\n        \r\n        isEditForm?updateProject():addProject();\r\n    }\r\n\r\n    const handleInputChange = (e : React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n\r\n        const newField: Field = {[fieldName] : {value: fieldValue}};\r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n\r\n    return(\r\n        <form className=\"container\" onSubmit={e => handleSubmit(e)}>\r\n            \r\n            <div>\r\n                <div> {/*is editForm */}\r\n                        {isEditForm? (\r\n                            <div>\r\n                                <h3>Edit</h3>\r\n                                \r\n                            </div>\r\n                        ):(\r\n                            <div>\r\n                                <h3>Adding</h3>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n\r\n            </div>\r\n           \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"projectNumber\">projectNumber</label>\r\n               <input id=\"projectNumber\" name=\"projectNumber\" type=\"text\" className=\"form-control\" value={form.projectNumber.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"projectLeader\">projectLeader</label>\r\n               <input id=\"projectLeader\" name=\"projectLeader\" type=\"text\" className=\"form-control\" value={form.projectLeader.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"statut\">statut</label>\r\n               <input id=\"statut\" name=\"statut\" type=\"text\" className=\"form-control\" value={form.statut.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            \r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"signatureDate\">signatureDate</label>\r\n               <input id=\"signatureDate\" name=\"signatureDate\" type=\"text\" className=\"form-control\" value={form.signatureDate.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"Client\">Client</label>\r\n               <input id=\"Client\" name=\"Client\" type=\"text\" className=\"form-control\" value={form.client.value} onChange={e => handleInputChange(e)}></input>        \r\n            </div>\r\n\r\n            <button type=\"submit\" className=\"btn grey darken-3 waves-effect waves-black\">Valider</button>\r\n            <span className=\"btn-floating right waves-effect waves-light\">\r\n               <i className=\"material-icons\" onClick={deleteProject}>delete</i>\r\n            </span>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ProjectForm;"]},"metadata":{},"sourceType":"module"}